{
  "openapi": "3.0.0",
  "paths": {
    "/whatsapp/message/template": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-template",
        "summary": "Send Whatsapp Template Message",
        "description": "Send Whatsapp Template Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "messages": {
                    "description": "Array of template messages to be sent",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "from": {
                          "type": "string",
                          "description": "The phone number from which the message is sent, with the country code",
                          "example": "+919999999999",
                          "minLength": 10,
                          "maxLength": 15,
                          "format": "phone"
                        },
                        "to": {
                          "type": "string",
                          "description": "The phone number to which the message is sent, with the country code",
                          "example": "+919999999999",
                          "minLength": 10,
                          "maxLength": 15,
                          "format": "phone"
                        },
                        "messageId": {
                          "type": "string",
                          "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                          "example": "uuid-v4",
                          "minLength": 36,
                          "maxLength": 36
                        },
                        "content": {
                          "description": "Template message to be sent",
                          "example": {
                            "templateName": "text_template",
                            "language": "en",
                            "templateData": {
                              "header": {
                                "type": "TEXT",
                                "placeholder": "Saurav"
                              },
                              "body": {
                                "placeholders": [
                                  "Saurav",
                                  "https://saurav.catalog.to"
                                ]
                              }
                            }
                          },
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "templateName": {
                                  "type": "string",
                                  "description": "Template name",
                                  "example": "template_name"
                                },
                                "language": {
                                  "type": "string",
                                  "description": "Template language",
                                  "example": "en",
                                  "default": "en",
                                  "enum": [
                                    "en",
                                    "en_US",
                                    "en_GB",
                                    "pt_BR",
                                    "es",
                                    "id"
                                  ]
                                },
                                "templateData": {
                                  "description": "Template data",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "header": {
                                          "description": "Template header",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "Template header type",
                                                  "enum": [
                                                    "TEXT",
                                                    "IMAGE",
                                                    "DOCUMENT",
                                                    "VIDEO",
                                                    "LOCATION"
                                                  ],
                                                  "example": "TEXT"
                                                },
                                                "placeholder": {
                                                  "type": "string",
                                                  "description": "Template header text",
                                                  "example": "Header text"
                                                },
                                                "mediaUrl": {
                                                  "type": "string",
                                                  "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                                                  "example": "https://example.com/image.png"
                                                },
                                                "filename": {
                                                  "type": "string",
                                                  "description": "Template header document caption",
                                                  "example": "Document caption"
                                                },
                                                "latitude": {
                                                  "type": "number",
                                                  "description": "Template header location latitude",
                                                  "example": -23.5505199
                                                },
                                                "longitude": {
                                                  "type": "number",
                                                  "description": "Template header location longitude",
                                                  "example": -46.6333094
                                                }
                                              }
                                            }
                                          ]
                                        },
                                        "body": {
                                          "description": "Template body",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "placeholders": {
                                                  "description": "Template body components",
                                                  "example": [
                                                    "Body text"
                                                  ],
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "required": [
                                                "placeholders"
                                              ]
                                            }
                                          ]
                                        },
                                        "buttons": {
                                          "description": "Template buttons",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "Template button type",
                                                "enum": [
                                                  "URL"
                                                ],
                                                "example": "URL"
                                              },
                                              "parameter": {
                                                "type": "string",
                                                "description": "Template button text (Required only when the URL is dynamic)",
                                                "example": "Button text"
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        },
                                        "cards": {
                                          "description": "Template carousel cards",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "cardIndex": {
                                                "type": "number",
                                                "description": "Index of the card - 0 Represents the first card",
                                                "example": "0"
                                              },
                                              "components": {
                                                "type": "object",
                                                "description": "Carousel cards components",
                                                "properties": {
                                                  "header": {
                                                    "description": "Carousel card header",
                                                    "type": "object",
                                                    "properties": {
                                                      "type": {
                                                        "type": "string",
                                                        "description": "Carousel card header type",
                                                        "enum": [
                                                          "IMAGE",
                                                          "VIDEO"
                                                        ],
                                                        "example": "IMAGE"
                                                      },
                                                      "mediaUrl": {
                                                        "type": "string",
                                                        "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                                        "example": "https://example.com/image.png"
                                                      }
                                                    }
                                                  },
                                                  "body": {
                                                    "description": "Carousel card body",
                                                    "allOf": [
                                                      {
                                                        "type": "object",
                                                        "properties": {
                                                          "placeholders": {
                                                            "description": "Template body components",
                                                            "example": [
                                                              "Body text"
                                                            ],
                                                            "type": "array",
                                                            "items": {
                                                              "type": "string"
                                                            }
                                                          }
                                                        },
                                                        "required": [
                                                          "placeholders"
                                                        ]
                                                      }
                                                    ]
                                                  },
                                                  "buttons": {
                                                    "description": "Carousel card buttons",
                                                    "type": "array",
                                                    "items": {
                                                      "type": "object",
                                                      "properties": {
                                                        "type": {
                                                          "type": "string",
                                                          "description": "Template button type",
                                                          "enum": [
                                                            "URL"
                                                          ],
                                                          "example": "URL"
                                                        },
                                                        "parameter": {
                                                          "type": "string",
                                                          "description": "Template button text (Required only when the URL is dynamic)",
                                                          "example": "Button text"
                                                        }
                                                      },
                                                      "required": [
                                                        "type"
                                                      ]
                                                    }
                                                  }
                                                }
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  ]
                                }
                              },
                              "required": [
                                "templateName",
                                "language"
                              ]
                            }
                          ]
                        }
                      },
                      "required": [
                        "to",
                        "content"
                      ]
                    }
                  }
                },
                "required": [
                  "messages"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/text": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-text",
        "summary": "Send Whatsapp Text Message",
        "description": "Send Whatsapp Text Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Text message to be sent",
                    "example": {
                      "text": "Hello, world!",
                      "previewUrl": true
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "The text message to be sent",
                            "example": "Hello, world!"
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/export-chats": {
      "post": {
        "operationId": "export-chats-to-excel",
        "summary": "Export Chats For a Customer For Given WabaNumber",
        "description": "Export Chats For a WabaNumber",
        "tags": [
          "Chat Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerPhoneNumber": {
                    "type": "string",
                    "description": "The phone number of customer",
                    "example": "919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "wabaNumber": {
                    "type": "string",
                    "description": "The wabaNumber of integration for which you want to export chats",
                    "example": "919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "startDate": {
                    "type": "string",
                    "description": "The starting date from which chat messages will be exported. This date should be formatted as 'DD-MM-YYYY'.",
                    "example": "14-05-2024"
                  },
                  "endDate": {
                    "type": "string",
                    "description": "The ending date up to which chat messages will be exported. This date should also be formatted as 'DD-MM-YYYY'.",
                    "example": "20-05-2024"
                  },
                  "includeMedia": {
                    "type": "boolean",
                    "description": "If true then it will include shared media link",
                    "example": true
                  }
                },
                "required": [
                  "customerPhoneNumber",
                  "wabaNumber",
                  "startDate",
                  "endDate",
                  "includeMedia"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": "true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/chat-messages": {
      "get": {
        "operationId": "get-chat-messages",
        "summary": "Get chat messages for a customer of WABA number",
        "description": "Retrieve chat messages sent by the specified WhatsApp Business Account (WABA) number, with optional date filtering.",
        "tags": [
          "Chat Messages"
        ],
        "parameters": [
          {
            "name": "wabaNumber",
            "in": "query",
            "required": true,
            "description": "The WhatsApp Business Account (WABA) number",
            "schema": {
              "type": "string",
              "example": "11234567890"
            }
          },
          {
            "name": "customerNumber",
            "in": "query",
            "required": true,
            "description": "Customer's phone number",
            "schema": {
              "type": "string",
              "example": "911234567890"
            }
          },
          {
            "name": "startDate",
            "in": "query",
            "required": false,
            "description": "The start date for the chat messages (DD-MM-YYYY)",
            "schema": {
              "type": "string",
              "example": "01-01-2024"
            }
          },
          {
            "name": "endDate",
            "in": "query",
            "required": false,
            "description": "The end date for the chat messages (DD-MM-YYYY)",
            "schema": {
              "type": "string",
              "example": "31-12-2024"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    },
                    "messages": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "messageId": {
                            "type": "string",
                            "example": "1234567890"
                          },
                          "sender": {
                            "type": "string",
                            "example": "19876543210"
                          },
                          "recipient": {
                            "type": "string",
                            "example": "919876543210"
                          },
                          "message": {
                            "type": "string",
                            "example": "Hello, how can I help you?"
                          },
                          "mediaUrl": {
                            "type": "string",
                            "example": "https://example.com/media/abc.jpg"
                          },
                          "timestamp": {
                            "type": "string",
                            "format": "date-time",
                            "example": "2024-01-01T10:00:00Z"
                          },
                          "status": {
                            "type": "string",
                            "example": "delivered"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/video": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-video",
        "summary": "Send Whatsapp Video Message",
        "description": "Send Whatsapp Video Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Video message to be sent",
                    "example": {
                      "url": "https://example.com/video.mp4",
                      "caption": "Some caption"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mediaUrl": {
                            "type": "string",
                            "description": "URL of the media to be sent",
                            "minLength": 1,
                            "maxLength": 2048,
                            "example": "https://example.com/image.jpg"
                          },
                          "caption": {
                            "type": "string",
                            "description": "Caption for the media",
                            "minLength": 1,
                            "maxLength": 3000,
                            "example": "This is a caption"
                          }
                        },
                        "required": [
                          "mediaUrl"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/audio": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-audio",
        "summary": "Send Whatsapp Audio Message",
        "description": "Send Whatsapp Audio Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Audio message to be sent",
                    "example": {
                      "url": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
                      "caption": "Some caption"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mediaUrl": {
                            "type": "string",
                            "description": "URL of the media to be sent",
                            "minLength": 1,
                            "maxLength": 2048,
                            "example": "https://example.com/image.jpg"
                          },
                          "caption": {
                            "type": "string",
                            "description": "Caption for the media",
                            "minLength": 1,
                            "maxLength": 3000,
                            "example": "This is a caption"
                          }
                        },
                        "required": [
                          "mediaUrl"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/image": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-image",
        "summary": "Send Whatsapp Image Message",
        "description": "Send Whatsapp Image Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Image message to be sent",
                    "example": {
                      "url": "https://example.com/image.jpg",
                      "caption": "Some caption"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mediaUrl": {
                            "type": "string",
                            "description": "URL of the media to be sent",
                            "minLength": 1,
                            "maxLength": 2048,
                            "example": "https://example.com/image.jpg"
                          },
                          "caption": {
                            "type": "string",
                            "description": "Caption for the media",
                            "minLength": 1,
                            "maxLength": 3000,
                            "example": "This is a caption"
                          }
                        },
                        "required": [
                          "mediaUrl"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/document": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-document",
        "summary": "Send Whatsapp Document Message",
        "description": "Send Whatsapp Document Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Document message to be sent",
                    "example": {
                      "url": "https://example.com/document.pdf",
                      "caption": "Some caption",
                      "filename": "Example File Name"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "mediaUrl": {
                            "type": "string",
                            "description": "URL of the media to be sent",
                            "minLength": 1,
                            "maxLength": 2048,
                            "example": "https://example.com/image.jpg"
                          },
                          "caption": {
                            "type": "string",
                            "description": "Caption for the media",
                            "minLength": 1,
                            "maxLength": 3000,
                            "example": "This is a caption"
                          },
                          "filename": {
                            "type": "string",
                            "description": "The filename of the document",
                            "example": "Example File Name"
                          }
                        },
                        "required": [
                          "mediaUrl"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/location": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-location",
        "summary": "Send Whatsapp Location Message",
        "description": "Send Whatsapp Location Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Location message to be sent",
                    "example": {
                      "latitude": 19.082502,
                      "longitude": 72.7163737,
                      "name": "Mumbai",
                      "address": "Mumbai, Maharashtra, India"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "latitude": {
                            "type": "number",
                            "description": "The latitude of the location",
                            "example": 19.082502
                          },
                          "longitude": {
                            "type": "number",
                            "description": "The longitude of the location",
                            "example": 72.7163737
                          },
                          "name": {
                            "type": "string",
                            "description": "The name of the location",
                            "example": "Mumbai"
                          },
                          "address": {
                            "type": "string",
                            "description": "The address of the location",
                            "example": "Mumbai, Maharashtra, India"
                          }
                        },
                        "required": [
                          "latitude",
                          "longitude"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/interactive": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-interactive",
        "summary": "Send Whatsapp Interactive Button Message",
        "description": "Send Whatsapp Interactive Button Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Text message to be sent",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "header": {
                            "type": "string",
                            "description": "The header text to be sent",
                            "maxLength": 60,
                            "example": "Header text"
                          },
                          "body": {
                            "type": "string",
                            "description": "The body of the message to be sent",
                            "maxLength": 1024,
                            "example": "Message body"
                          },
                          "footer": {
                            "type": "string",
                            "description": "The footer text to be sent",
                            "maxLength": 20,
                            "example": "Footer text"
                          },
                          "buttons": {
                            "type": "array",
                            "description": "Array of buttons to be sent",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "A unique identifier",
                                  "maxLength": 60,
                                  "example": "uuid-v4"
                                },
                                "title": {
                                  "type": "string",
                                  "description": "The title of button to be displayed",
                                  "maxLength": 20,
                                  "example": "Button title"
                                }
                              },
                              "required": [
                                "id",
                                "title"
                              ]
                            }
                          }
                        },
                        "required": [
                          "body",
                          "buttons"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/interactive-list": {
      "post": {
        "operationId": "outgoing-messages-whatsapp-interactive-list",
        "summary": "Send Whatsapp Interactive List Message",
        "description": "Send Whatsapp Interactive List Message",
        "tags": [
          "Outgoing Messages"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "to": {
                    "type": "string",
                    "description": "The phone number to which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "messageId": {
                    "type": "string",
                    "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                    "example": "uuid-v4",
                    "minLength": 36,
                    "maxLength": 36
                  },
                  "content": {
                    "description": "Text message to be sent",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "header": {
                            "type": "string",
                            "description": "The header text to be sent",
                            "maxLength": 60,
                            "example": "Header text"
                          },
                          "body": {
                            "type": "string",
                            "description": "The body of the message to be sent",
                            "maxLength": 1024,
                            "example": "Message body"
                          },
                          "footer": {
                            "type": "string",
                            "description": "The footer text to be sent",
                            "maxLength": 20,
                            "example": "Footer text"
                          },
                          "button": {
                            "type": "string",
                            "description": "The button for opening the list",
                            "maxLength": 20,
                            "example": "Button text"
                          },
                          "sections": {
                            "type": "array",
                            "description": "Array of sections to be sent",
                            "items": {
                              "type": "object",
                              "properties": {
                                "title": {
                                  "type": "string",
                                  "description": "The title of section to be displayed",
                                  "maxLength": 24,
                                  "example": "Section title"
                                },
                                "rows": {
                                  "type": "array",
                                  "description": "Array of sections to be sent",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "id": {
                                        "type": "string",
                                        "description": "A unique identifier",
                                        "maxLength": 60,
                                        "example": "uuid-v4"
                                      },
                                      "title": {
                                        "type": "string",
                                        "description": "The title of row to be displayed",
                                        "maxLength": 24,
                                        "example": "Row title"
                                      },
                                      "description": {
                                        "type": "string",
                                        "description": "The description of row to be displayed",
                                        "maxLength": 72,
                                        "example": "Row description"
                                      }
                                    },
                                    "required": [
                                      "id",
                                      "title"
                                    ]
                                  }
                                }
                              },
                              "required": [
                                "rows"
                              ]
                            }
                          }
                        },
                        "required": [
                          "body",
                          "button",
                          "sections"
                        ]
                      }
                    ]
                  }
                },
                "required": [
                  "to",
                  "content"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/whatsapp/message/broadcast": {
      "post": {
        "tags": [
          "Broadcast Groups"
        ],
        "summary": "Send Template Whatsapp Message to Broadcast Group",
        "description": "Send a template WhatsApp message to a broadcast group. When using placeholders in your message, please follow the format outlined below:\n\n- {{Name}}: Used to include the name of the customer.\n- {{Phone Number}}: Used to include the phone number of the customer.\n- {{<Custom Field Name>}}: Used to include custom fields. This will only function correctly if the custom field has been set for all customers within the broadcast group.",
        "operationId": "send-broadcast-message",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupName": {
                    "type": "string",
                    "description": "The name of the WhatsApp group to send the message to",
                    "example": "Test Group"
                  },
                  "from": {
                    "type": "string",
                    "description": "The phone number from which the message is sent, with the country code",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "content": {
                    "type": "object",
                    "properties": {
                      "templateName": {
                        "type": "string",
                        "description": "Template name",
                        "example": "template_name"
                      },
                      "language": {
                        "type": "string",
                        "description": "Template language",
                        "example": "en",
                        "default": "en",
                        "enum": [
                          "en",
                          "en_US",
                          "en_GB",
                          "pt_BR",
                          "es",
                          "id"
                        ]
                      },
                      "templateData": {
                        "description": "Template data",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "header": {
                                "description": "Template header",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "Template header type",
                                        "enum": [
                                          "TEXT",
                                          "IMAGE",
                                          "DOCUMENT",
                                          "VIDEO",
                                          "LOCATION"
                                        ],
                                        "example": "TEXT"
                                      },
                                      "placeholder": {
                                        "type": "string",
                                        "description": "Template header text",
                                        "example": "Header text"
                                      },
                                      "mediaUrl": {
                                        "type": "string",
                                        "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                                        "example": "https://example.com/image.png"
                                      },
                                      "filename": {
                                        "type": "string",
                                        "description": "Template header document caption",
                                        "example": "Document caption"
                                      },
                                      "latitude": {
                                        "type": "number",
                                        "description": "Template header location latitude",
                                        "example": -23.5505199
                                      },
                                      "longitude": {
                                        "type": "number",
                                        "description": "Template header location longitude",
                                        "example": -46.6333094
                                      }
                                    }
                                  }
                                ]
                              },
                              "body": {
                                "description": "Template body",
                                "allOf": [
                                  {
                                    "type": "object",
                                    "properties": {
                                      "placeholders": {
                                        "description": "Template body components",
                                        "example": [
                                          "Body text"
                                        ],
                                        "type": "array",
                                        "items": {
                                          "type": "string"
                                        }
                                      }
                                    },
                                    "required": [
                                      "placeholders"
                                    ]
                                  }
                                ]
                              },
                              "buttons": {
                                "description": "Template buttons",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Template button type",
                                      "enum": [
                                        "URL"
                                      ],
                                      "example": "URL"
                                    },
                                    "parameter": {
                                      "type": "string",
                                      "description": "Template button text (Required only when the URL is dynamic)",
                                      "example": "Button text"
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ]
                                }
                              },
                              "cards": {
                                "description": "Template carousel cards",
                                "type": "array",
                                "items": {
                                  "type": "object",
                                  "properties": {
                                    "cardIndex": {
                                      "type": "number",
                                      "description": "Index of the card - 0 Represents the first card",
                                      "example": "0"
                                    },
                                    "components": {
                                      "type": "object",
                                      "description": "Carousel cards components",
                                      "properties": {
                                        "header": {
                                          "description": "Carousel card header",
                                          "type": "object",
                                          "properties": {
                                            "type": {
                                              "type": "string",
                                              "description": "Carousel card header type",
                                              "enum": [
                                                "IMAGE",
                                                "VIDEO"
                                              ],
                                              "example": "IMAGE"
                                            },
                                            "mediaUrl": {
                                              "type": "string",
                                              "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                              "example": "https://example.com/image.png"
                                            }
                                          }
                                        },
                                        "body": {
                                          "description": "Carousel card body",
                                          "allOf": [
                                            {
                                              "type": "object",
                                              "properties": {
                                                "placeholders": {
                                                  "description": "Template body components",
                                                  "example": [
                                                    "Body text"
                                                  ],
                                                  "type": "array",
                                                  "items": {
                                                    "type": "string"
                                                  }
                                                }
                                              },
                                              "required": [
                                                "placeholders"
                                              ]
                                            }
                                          ]
                                        },
                                        "buttons": {
                                          "description": "Carousel card buttons",
                                          "type": "array",
                                          "items": {
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "Template button type",
                                                "enum": [
                                                  "URL"
                                                ],
                                                "example": "URL"
                                              },
                                              "parameter": {
                                                "type": "string",
                                                "description": "Template button text (Required only when the URL is dynamic)",
                                                "example": "Button text"
                                              }
                                            },
                                            "required": [
                                              "type"
                                            ]
                                          }
                                        }
                                      }
                                    }
                                  },
                                  "required": [
                                    "type"
                                  ]
                                }
                              }
                            }
                          }
                        ]
                      }
                    },
                    "required": [
                      "templateName",
                      "language"
                    ]
                  }
                },
                "required": [
                  "groupName"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "status": {
                      "type": "string",
                      "description": "The status of the sent message (SENT or FAILED)",
                      "example": "SENT",
                      "enum": [
                        "SENT",
                        "FAILED"
                      ]
                    },
                    "messageId": {
                      "type": "string",
                      "description": "The ID of the sent message",
                      "example": "e7de18e6-9e96-4a7b-b570-93eaa0518584"
                    },
                    "errorMessage": {
                      "type": "string",
                      "description": "The error message in case of a failed message",
                      "example": "Sample Error"
                    }
                  },
                  "required": [
                    "status",
                    "messageId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input provided"
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/template": {
      "post": {
        "operationId": "create-template",
        "summary": "Create New Template",
        "description": "Create New Template",
        "tags": [
          "Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Template Name",
                    "minLength": 1,
                    "maxLength": 512
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "af",
                      "sq",
                      "ar",
                      "az",
                      "bn",
                      "bg",
                      "ca",
                      "zh_CN",
                      "zh_HK",
                      "zh_TW",
                      "hr",
                      "cs",
                      "da",
                      "nl",
                      "en",
                      "en_GB",
                      "en_US",
                      "et",
                      "fil",
                      "fi",
                      "fr",
                      "ka",
                      "de",
                      "el",
                      "gu",
                      "ha",
                      "he",
                      "hi",
                      "hu",
                      "id",
                      "ga",
                      "it",
                      "ja",
                      "kn",
                      "kk",
                      "rw_RW",
                      "ko",
                      "ky_KG",
                      "lo",
                      "lv",
                      "lt",
                      "mk",
                      "ms",
                      "ml",
                      "mr",
                      "nb",
                      "fa",
                      "pl",
                      "pt_BR",
                      "pt_PT",
                      "pa",
                      "ro",
                      "ru",
                      "sr",
                      "sk",
                      "sl",
                      "es",
                      "es_AR",
                      "es_ES",
                      "es_MX",
                      "sw",
                      "sv",
                      "ta",
                      "te",
                      "th",
                      "tr",
                      "uk",
                      "ur",
                      "uz"
                    ],
                    "description": "Template Language",
                    "example": "en"
                  },
                  "components": {
                    "description": "Template Components",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "header": {
                            "description": "Header Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "format": {
                                    "type": "string",
                                    "description": "Header Format",
                                    "enum": [
                                      "TEXT",
                                      "IMAGE",
                                      "VIDEO",
                                      "DOCUMENT"
                                    ]
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "Header Text (Present only if format is TEXT)",
                                    "maxLength": 60
                                  },
                                  "example": {
                                    "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "link": {
                                            "type": "string",
                                            "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "format"
                                ]
                              }
                            ]
                          },
                          "body": {
                            "description": "Body Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "Body Text",
                                    "maxLength": 1024
                                  },
                                  "example": {
                                    "type": "object",
                                    "description": "Body Variable Example (Present only if text contains variable)",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "text"
                                ]
                              }
                            ]
                          },
                          "footer": {
                            "description": "Footer Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "Footer Text",
                                    "maxLength": 60
                                  }
                                },
                                "required": [
                                  "text"
                                ]
                              }
                            ]
                          },
                          "buttons": {
                            "description": "Buttons Component",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Button Type",
                                  "enum": [
                                    "QUICK_REPLY",
                                    "URL",
                                    "PHONE_NUMBER"
                                  ]
                                },
                                "text": {
                                  "type": "string",
                                  "description": "Button Text",
                                  "maxLength": 25,
                                  "minLength": 1
                                },
                                "url": {
                                  "type": "string",
                                  "description": "Button Url (Present only if type is URL)"
                                },
                                "example": {
                                  "type": "string",
                                  "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ]
                            }
                          }
                        },
                        "required": [
                          "body"
                        ]
                      }
                    ]
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "MARKETING",
                      "UTILITY"
                    ],
                    "description": "Template Category",
                    "example": "MARKETING"
                  },
                  "wabaNumbers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The phone number from which the message is sent, with the country code",
                      "example": "+919999999999",
                      "minLength": 10,
                      "maxLength": 15,
                      "format": "phone"
                    }
                  },
                  "allowCategoryUpdate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to true to allow Meta to automatically assign a category. If omitted, the template may be rejected due to miscategorization."
                  }
                },
                "required": [
                  "name",
                  "language",
                  "components",
                  "category"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Create New Template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "operationId": "delete-template",
        "summary": "Delete Template",
        "description": "Delete Template",
        "tags": [
          "Template"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Template Name",
                    "example": "template_name"
                  },
                  "wabaPhoneNumber": {
                    "type": "string",
                    "description": "Waba Number",
                    "example": "14155238886"
                  }
                },
                "required": [
                  "name",
                  "wabaNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Delete Template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/template/{templateId}": {
      "patch": {
        "operationId": "edit-template",
        "summary": "Edit Template",
        "description": "Edit Template",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "templateId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The template ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "Template Name",
                    "minLength": 1,
                    "maxLength": 512
                  },
                  "language": {
                    "type": "string",
                    "enum": [
                      "af",
                      "sq",
                      "ar",
                      "az",
                      "bn",
                      "bg",
                      "ca",
                      "zh_CN",
                      "zh_HK",
                      "zh_TW",
                      "hr",
                      "cs",
                      "da",
                      "nl",
                      "en",
                      "en_GB",
                      "en_US",
                      "et",
                      "fil",
                      "fi",
                      "fr",
                      "ka",
                      "de",
                      "el",
                      "gu",
                      "ha",
                      "he",
                      "hi",
                      "hu",
                      "id",
                      "ga",
                      "it",
                      "ja",
                      "kn",
                      "kk",
                      "rw_RW",
                      "ko",
                      "ky_KG",
                      "lo",
                      "lv",
                      "lt",
                      "mk",
                      "ms",
                      "ml",
                      "mr",
                      "nb",
                      "fa",
                      "pl",
                      "pt_BR",
                      "pt_PT",
                      "pa",
                      "ro",
                      "ru",
                      "sr",
                      "sk",
                      "sl",
                      "es",
                      "es_AR",
                      "es_ES",
                      "es_MX",
                      "sw",
                      "sv",
                      "ta",
                      "te",
                      "th",
                      "tr",
                      "uk",
                      "ur",
                      "uz"
                    ],
                    "description": "Template Language",
                    "example": "en"
                  },
                  "components": {
                    "description": "Template Components",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "header": {
                            "description": "Header Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "format": {
                                    "type": "string",
                                    "description": "Header Format",
                                    "enum": [
                                      "TEXT",
                                      "IMAGE",
                                      "VIDEO",
                                      "DOCUMENT"
                                    ]
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "Header Text (Present only if format is TEXT)",
                                    "maxLength": 60
                                  },
                                  "example": {
                                    "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                                    "additionalProperties": {
                                      "type": "string"
                                    },
                                    "allOf": [
                                      {
                                        "type": "object",
                                        "properties": {
                                          "link": {
                                            "type": "string",
                                            "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                                          }
                                        }
                                      }
                                    ]
                                  }
                                },
                                "required": [
                                  "format"
                                ]
                              }
                            ]
                          },
                          "body": {
                            "description": "Body Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "Body Text",
                                    "maxLength": 1024
                                  },
                                  "example": {
                                    "type": "object",
                                    "description": "Body Variable Example (Present only if text contains variable)",
                                    "additionalProperties": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "text"
                                ]
                              }
                            ]
                          },
                          "footer": {
                            "description": "Footer Component",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "text": {
                                    "type": "string",
                                    "description": "Footer Text",
                                    "maxLength": 60
                                  }
                                },
                                "required": [
                                  "text"
                                ]
                              }
                            ]
                          },
                          "buttons": {
                            "description": "Buttons Component",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Button Type",
                                  "enum": [
                                    "QUICK_REPLY",
                                    "URL",
                                    "PHONE_NUMBER"
                                  ]
                                },
                                "text": {
                                  "type": "string",
                                  "description": "Button Text",
                                  "maxLength": 25,
                                  "minLength": 1
                                },
                                "url": {
                                  "type": "string",
                                  "description": "Button Url (Present only if type is URL)"
                                },
                                "example": {
                                  "type": "string",
                                  "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                                },
                                "phoneNumber": {
                                  "type": "string",
                                  "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                                }
                              },
                              "required": [
                                "type",
                                "text"
                              ]
                            }
                          }
                        },
                        "required": [
                          "body"
                        ]
                      }
                    ]
                  },
                  "category": {
                    "type": "string",
                    "enum": [
                      "MARKETING",
                      "UTILITY"
                    ],
                    "description": "Template Category",
                    "example": "MARKETING"
                  },
                  "wabaNumbers": {
                    "type": "array",
                    "items": {
                      "type": "string",
                      "description": "The phone number from which the message is sent, with the country code",
                      "example": "+919999999999",
                      "minLength": 10,
                      "maxLength": 15,
                      "format": "phone"
                    }
                  },
                  "allowCategoryUpdate": {
                    "type": "boolean",
                    "default": true,
                    "description": "Set to true to allow Meta to automatically assign a category. If omitted, the template may be rejected due to miscategorization."
                  }
                },
                "required": [
                  "name",
                  "language",
                  "components",
                  "category"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Edit Template",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": true
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v2/templates": {
      "get": {
        "operationId": "get-templates",
        "summary": "Get Templates",
        "description": "Get Templates",
        "tags": [
          "Template"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "status",
            "schema": {
              "type": "string",
              "description": "Template status",
              "example": "PENDING",
              "enum": [
                "APPROVED",
                "REJECTED",
                "PENDING",
                "PAUSED",
                "ALL"
              ]
            },
            "description": "Template status",
            "required": false
          },
          {
            "in": "query",
            "name": "name",
            "schema": {
              "type": "string",
              "description": "Template name",
              "example": "test_template"
            },
            "description": "Template name",
            "required": false
          },
          {
            "in": "query",
            "name": "language",
            "schema": {
              "type": "string",
              "description": "Template language",
              "example": "en",
              "enum": [
                "af",
                "sq",
                "ar",
                "az",
                "bn",
                "bg",
                "ca",
                "zh_CN",
                "zh_HK",
                "zh_TW",
                "hr",
                "cs",
                "da",
                "nl",
                "en",
                "en_GB",
                "en_US",
                "et",
                "fil",
                "fi",
                "fr",
                "ka",
                "de",
                "el",
                "gu",
                "ha",
                "he",
                "hi",
                "hu",
                "id",
                "ga",
                "it",
                "ja",
                "kn",
                "kk",
                "rw_RW",
                "ko",
                "ky_KG",
                "lo",
                "lv",
                "lt",
                "mk",
                "ms",
                "ml",
                "mr",
                "nb",
                "fa",
                "pl",
                "pt_BR",
                "pt_PT",
                "pa",
                "ro",
                "ru",
                "sr",
                "sk",
                "sl",
                "es",
                "es_AR",
                "es_ES",
                "es_MX",
                "sw",
                "sv",
                "ta",
                "te",
                "th",
                "tr",
                "uk",
                "ur",
                "uz"
              ]
            },
            "description": "Template language",
            "required": false
          },
          {
            "in": "query",
            "name": "category",
            "schema": {
              "type": "string",
              "description": "Template category",
              "example": "MARKETING",
              "enum": [
                "MARKETING",
                "UTILITY"
              ]
            },
            "description": "Template category",
            "required": false
          },
          {
            "in": "query",
            "name": "wabaPhoneNumbers",
            "schema": {
              "type": "string",
              "description": "Comma separated waba phone numbers",
              "example": "919999999999,918888888888"
            },
            "description": "Waba Phone Numbers",
            "required": false
          },
          {
            "in": "query",
            "name": "allWabaPhoneNumbers",
            "schema": {
              "type": "boolean",
              "description": "If set to true, returns templates for all Waba Phone Numbers",
              "example": true
            },
            "description": "If set to true, returns templates for all Waba Phone Numbers",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Get Templates",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "number",
                        "description": "Template ID"
                      },
                      "name": {
                        "type": "string",
                        "description": "Template Name",
                        "minLength": 1,
                        "maxLength": 512
                      },
                      "language": {
                        "type": "string",
                        "enum": [
                          "af",
                          "sq",
                          "ar",
                          "az",
                          "bn",
                          "bg",
                          "ca",
                          "zh_CN",
                          "zh_HK",
                          "zh_TW",
                          "hr",
                          "cs",
                          "da",
                          "nl",
                          "en",
                          "en_GB",
                          "en_US",
                          "et",
                          "fil",
                          "fi",
                          "fr",
                          "ka",
                          "de",
                          "el",
                          "gu",
                          "ha",
                          "he",
                          "hi",
                          "hu",
                          "id",
                          "ga",
                          "it",
                          "ja",
                          "kn",
                          "kk",
                          "rw_RW",
                          "ko",
                          "ky_KG",
                          "lo",
                          "lv",
                          "lt",
                          "mk",
                          "ms",
                          "ml",
                          "mr",
                          "nb",
                          "fa",
                          "pl",
                          "pt_BR",
                          "pt_PT",
                          "pa",
                          "ro",
                          "ru",
                          "sr",
                          "sk",
                          "sl",
                          "es",
                          "es_AR",
                          "es_ES",
                          "es_MX",
                          "sw",
                          "sv",
                          "ta",
                          "te",
                          "th",
                          "tr",
                          "uk",
                          "ur",
                          "uz"
                        ],
                        "description": "Template Language",
                        "example": "en"
                      },
                      "category": {
                        "type": "string",
                        "enum": [
                          "MARKETING",
                          "UTILITY"
                        ],
                        "description": "Template Category",
                        "example": "MARKETING"
                      },
                      "status": {
                        "type": "string",
                        "enum": [
                          "APPROVED",
                          "REJECTED",
                          "PENDING",
                          "PAUSED"
                        ],
                        "description": "Template Status",
                        "example": "PAUSED"
                      },
                      "rejectedReason": {
                        "type": "string",
                        "description": "Template Rejected Reason",
                        "example": "Template Rejected Reason"
                      },
                      "createdBy": {
                        "type": "string",
                        "description": "Template Created By",
                        "example": "Creater_Name"
                      },
                      "wabaPhoneNumber": {
                        "type": "string",
                        "description": "Waba Phone Number",
                        "example": "14155238886"
                      },
                      "components": {
                        "description": "Template Components",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "enum": [
                                "BODY",
                                "HEADER",
                                "FOOTER",
                                "BUTTON"
                              ],
                              "description": "Component Type",
                              "example": "HEADER"
                            },
                            "format": {
                              "type": "string",
                              "enum": [
                                "TEXT",
                                "IMAGE",
                                "DOCUMENT",
                                "VIDEO",
                                "LOCATION"
                              ],
                              "description": "Template Component Format (Present when type is HEADER)",
                              "example": "TEXT"
                            },
                            "text": {
                              "type": "string",
                              "description": "Present WHEN type is BODY/FOOTER or type is HEADER and format is TEXT"
                            },
                            "variables": {
                              "description": "Present when type is HEADER/BODY",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "name": {
                                    "type": "string",
                                    "description": "Name of the variable present in the text",
                                    "example": "variable_1"
                                  },
                                  "mediaUrl": {
                                    "type": "string",
                                    "description": "Present only if type is IMAGE/VIDEO/DOCUMENT",
                                    "example": "https://placeholder.com/150"
                                  },
                                  "fileName": {
                                    "type": "string",
                                    "description": "The filename of the document (Present only if type is DOCUMENT)",
                                    "example": "Example File Name"
                                  }
                                }
                              }
                            },
                            "buttons": {
                              "description": "Present when type is BUTTON",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Button Type",
                                    "enum": [
                                      "QUICK_REPLY",
                                      "URL",
                                      "PHONE_NUMBER"
                                    ],
                                    "example": "URL"
                                  },
                                  "text": {
                                    "type": "string",
                                    "description": "Button Text",
                                    "example": "Button Text"
                                  },
                                  "url": {
                                    "type": "string",
                                    "description": "Button Url (Present only if type is URL)"
                                  },
                                  "phoneNumber": {
                                    "type": "string",
                                    "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                                  },
                                  "variables": {
                                    "description": "Button Variables (Present when type is URL)",
                                    "type": "array",
                                    "items": {
                                      "type": "object",
                                      "properties": {
                                        "parameter": {
                                          "type": "string",
                                          "example": "some-url-path"
                                        }
                                      },
                                      "required": [
                                        "parameter"
                                      ]
                                    }
                                  }
                                },
                                "required": [
                                  "text",
                                  "type"
                                ]
                              }
                            }
                          },
                          "required": [
                            "type"
                          ],
                          "example": [
                            {
                              "type": "HEADER",
                              "format": "IMAGE",
                              "variables": [
                                {
                                  "mediaUrl": "https://placeholder.com/150"
                                }
                              ]
                            },
                            {
                              "type": "BODY",
                              "text": "Hi {{name}}, \r\nWelcome to your shop!\r\nWe have got {{offer_name}} for you",
                              "variables": [
                                {
                                  "name": "name"
                                },
                                {
                                  "name": "offer_name"
                                }
                              ]
                            },
                            {
                              "type": "FOOTER",
                              "text": "powered by doubletick.io"
                            },
                            {
                              "type": "BUTTON",
                              "buttons": [
                                {
                                  "type": "QUICK_REPLY",
                                  "text": "Interested"
                                },
                                {
                                  "type": "QUICK_REPLY",
                                  "text": "Tell me More"
                                },
                                {
                                  "type": "QUICK_REPLY",
                                  "text": "Stop"
                                }
                              ]
                            }
                          ]
                        }
                      }
                    },
                    "required": [
                      "id",
                      "name",
                      "language",
                      "category",
                      "components",
                      "status",
                      "rejectedReason",
                      "createdBy",
                      "wabaPhoneNumber"
                    ]
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/details": {
      "get": {
        "operationId": "get-customer-details",
        "summary": "Get customer details ",
        "description": "Get details of customer along with custom fields ",
        "tags": [
          "Customer"
        ],
        "parameters": [
          {
            "name": "phoneNumber",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "917838849957",
            "required": false
          },
          {
            "name": "customerId",
            "in": "query",
            "schema": {
              "type": "string"
            },
            "example": "customer_xxxxxxxxxx",
            "required": false
          }
        ],
        "responses": {
          "200": {
            "description": "Information about the customer",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "customer": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "example": "customer_abcde12345"
                        },
                        "name": {
                          "type": "string",
                          "example": "customername1"
                        },
                        "phone": {
                          "type": "string",
                          "example": "+919999999999"
                        },
                        "customFields": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "example": ""
                              },
                              "name": {
                                "type": "string"
                              },
                              "value": {
                                "type": "string"
                              },
                              "type ": {
                                "type": "string"
                              }
                            }
                          }
                        },
                        "assignedToUser": {
                          "type": "string"
                        },
                        "assignedUserNumber": {
                          "type": "string"
                        }
                      }
                    }
                  },
                  "required": [
                    "phone"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "NotFound"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/assign-tags-custom-fields": {
      "post": {
        "operationId": "customer-assign-tags-custom-fields",
        "summary": "Assign Custom Fields and/or Tags to Customer",
        "description": "Assign Custom Fields and/or Tags to Customer",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "Customer Phone Number with country code. Example, 919876543210",
                    "example": "919876543210"
                  },
                  "tags": {
                    "description": "Array of tags to be assigned",
                    "example": [
                      "tag1",
                      "tag2"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "customFields": {
                    "description": "Array of custom fields to be assigned",
                    "example": [
                      {
                        "name": "field name",
                        "value": "value"
                      }
                    ],
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "custom field name",
                          "example": "field name"
                        },
                        "value": {
                          "type": "string",
                          "description": "custom field value",
                          "example": "value"
                        }
                      },
                      "required": [
                        "name",
                        "value"
                      ]
                    }
                  },
                  "name": {
                    "type": "string",
                    "description": "Customer Name",
                    "example": "John Doe"
                  },
                  "optIn": {
                    "type": "boolean",
                    "description": "Opt in status of the customer",
                    "example": true
                  },
                  "agentPhone": {
                    "type": "string",
                    "description": "Agent Phone Number with country code (null if unassigned)",
                    "example": "919876543210"
                  },
                  "wabaNumber": {
                    "type": "string",
                    "description": "Integration Waba Number with country code",
                    "example": "919876543210"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer Tags and Custom Fields Assigned",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "description": "tags response",
                      "example": {
                        "added": [
                          "tag name"
                        ],
                        "errored": [
                          {
                            "tag": "tag name 2",
                            "error": "error message"
                          }
                        ]
                      },
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "added": {
                              "description": "Array of tags added",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "errored": {
                              "description": "Array of tags errored",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tag": {
                                    "type": "string",
                                    "description": "tag name"
                                  },
                                  "error": {
                                    "type": "string",
                                    "description": "error message"
                                  }
                                },
                                "required": [
                                  "tag",
                                  "error"
                                ]
                              }
                            }
                          },
                          "required": [
                            "added",
                            "errored"
                          ]
                        }
                      ]
                    },
                    "customFields": {
                      "description": "custom fields response",
                      "example": {
                        "added": [
                          "custom field name"
                        ],
                        "errored": [
                          {
                            "customField": "custom field name 2",
                            "error": "error message"
                          }
                        ]
                      },
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "added": {
                              "description": "Array of custom fields added",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "errored": {
                              "description": "Array of custom fields errored",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "customField": {
                                    "type": "string",
                                    "description": "custom field name"
                                  },
                                  "error": {
                                    "type": "string",
                                    "description": "error message"
                                  }
                                },
                                "required": [
                                  "customField",
                                  "error"
                                ]
                              }
                            }
                          },
                          "required": [
                            "added",
                            "errored"
                          ]
                        }
                      ]
                    },
                    "customerId": {
                      "type": "string",
                      "description": "Customer ID",
                      "example": "customer_n9mfidizLv"
                    }
                  },
                  "required": [
                    "tags",
                    "customFields"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/remove-tags-custom-fields": {
      "post": {
        "operationId": "customer-remove-tags-custom-fields",
        "summary": "Remove Custom Fields and/or Tags from Customer",
        "description": "Remove Custom Fields and/or Tags from Customer",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "customer phone number"
                  },
                  "tags": {
                    "description": "Array of tags to be removed",
                    "example": [
                      "tag1",
                      "tag2"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "customFields": {
                    "description": "Array of customFields to be removed",
                    "example": [
                      "custom field 1",
                      "custom field 2"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "wabaNumber": {
                    "type": "string",
                    "description": "Integration Waba Number with country code",
                    "example": "919876543210"
                  }
                },
                "required": [
                  "phone",
                  "tags",
                  "customFields"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Customer Tags and Custom Fields Removed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "tags": {
                      "description": "tags response",
                      "example": {
                        "removed": [
                          "tag name"
                        ],
                        "errored": [
                          {
                            "tag": "tag name 2",
                            "error": "error message"
                          }
                        ]
                      },
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "added": {
                              "description": "Array of tags added",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "errored": {
                              "description": "Array of tags errored",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "tag": {
                                    "type": "string",
                                    "description": "tag name"
                                  },
                                  "error": {
                                    "type": "string",
                                    "description": "error message"
                                  }
                                },
                                "required": [
                                  "tag",
                                  "error"
                                ]
                              }
                            }
                          },
                          "required": [
                            "added",
                            "errored"
                          ]
                        }
                      ]
                    },
                    "customFields": {
                      "description": "custom fields response",
                      "example": {
                        "removed": [
                          "custom field name"
                        ],
                        "errored": [
                          {
                            "customField": "custom field name 2",
                            "error": "error message"
                          }
                        ]
                      },
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "added": {
                              "description": "Array of custom fields added",
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            },
                            "errored": {
                              "description": "Array of custom fields errored",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "customField": {
                                    "type": "string",
                                    "description": "custom field name"
                                  },
                                  "error": {
                                    "type": "string",
                                    "description": "error message"
                                  }
                                },
                                "required": [
                                  "customField",
                                  "error"
                                ]
                              }
                            }
                          },
                          "required": [
                            "added",
                            "errored"
                          ]
                        }
                      ]
                    }
                  },
                  "required": [
                    "tags",
                    "customFields"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/block": {
      "post": {
        "operationId": "block-unblock-customer",
        "summary": "Block a customer ",
        "description": "Block customer using phone number ",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "The phone number of customer which block operation will be performed",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phone must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Customer"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/unblock": {
      "post": {
        "operationId": "unblock-unblock-customer",
        "summary": "Unblock a customer ",
        "description": "Unblock customer using phone number ",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phone": {
                    "type": "string",
                    "description": "The phone number of customer which unblock operation will be performed",
                    "example": "+919999999999",
                    "minLength": 10,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "phone"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {}
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phone must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "NotFound",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid Customer"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team-member/assign": {
      "post": {
        "operationId": "assign-team-member-to-chat",
        "summary": "Assign team member to chat",
        "description": " Assign team member to chat ",
        "tags": [
          "Team Member"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerPhoneNumber": {
                    "description": "Phone number of customer",
                    "type": "string",
                    "example": "917838849957",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "assignedUserPhoneNumber": {
                    "description": "Phone number of customer",
                    "type": "string",
                    "example": "917838849957",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "reassign": {
                    "description": "Boolean to assign user even if chat is already assigned",
                    "type": "boolean",
                    "example": "true",
                    "format": "boolean"
                  },
                  "wabaNumber": {
                    "type": "string",
                    "description": "Integration Waba Number with country code",
                    "example": "919876543210",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "customerPhoneNumber",
                  "assignedUserPhoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "User is not a member of the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "User is not a member of the team"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team-member/unassign": {
      "post": {
        "summary": "Unssign team member from a chat",
        "description": "Unassign team member from a chat",
        "operationId": "unassign-team-member-from-chat",
        "tags": [
          "Team Member"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerPhoneNumber": {
                    "description": "Phone number of customer",
                    "type": "string",
                    "example": "919999999999",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "customerPhoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": "true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "customerPhoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "User is not a member of the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "User is not a member of the team"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team-member/logout": {
      "post": {
        "summary": "Logout a team member",
        "description": "Logout a team member",
        "operationId": "logout-team-member",
        "tags": [
          "Team Member"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "userPhoneNumber": {
                    "description": "Phone number of the User",
                    "type": "string",
                    "example": "919999999999",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "userPhoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "example": "true"
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "userPhoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "User is not a member of the team",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "User is not a member of the team"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/check-reverted-on-time": {
      "get": {
        "summary": "Check reverted on time",
        "description": "Check reverted on time",
        "operationId": "check-reverted-on-time",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "phoneNumber": {
                    "description": "Phone number of customer",
                    "type": "string",
                    "example": "+919999999999",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "waitingForResponseInSec": {
                    "description": "Wait time for response in seconds.",
                    "type": "number",
                    "example": 60
                  },
                  "defaultAgentName": {
                    "description": "Default name for the agent",
                    "type": "string",
                    "example": "abc"
                  },
                  "defaultAgentNumber": {
                    "description": "Default number of the agent",
                    "type": "string",
                    "example": "+919999999999",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "wabaNumber": {
                    "description": "Waba Number",
                    "type": "string",
                    "example": "+919999999999",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "agentName": {
                      "type": "string",
                      "example": "abc"
                    },
                    "agentPhoneNumber": {
                      "type": "string",
                      "example": "+919999999999"
                    },
                    "revertedOnTime": {
                      "type": "boolean",
                      "example": false
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/groups": {
      "post": {
        "summary": "Create a new group",
        "description": "Create a new group",
        "tags": [
          "Broadcast Groups"
        ],
        "operationId": "create-group",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "name": {
                    "type": "string",
                    "description": "The name of the group",
                    "example": "Test Group"
                  },
                  "members": {
                    "type": "array",
                    "description": "List of members in the group",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the member",
                          "example": "Name"
                        },
                        "phone": {
                          "type": "string",
                          "description": "The phone number of the member",
                          "example": "919999999999"
                        }
                      },
                      "required": [
                        "phone"
                      ]
                    }
                  }
                },
                "required": [
                  "name"
                ],
                "additionalProperties": false
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Group created successfully",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groupData": {
                      "type": "object",
                      "properties": {
                        "groupId": {
                          "type": "string",
                          "description": "The ID of the newly created group",
                          "example": "group_CG0wH3AIQw"
                        },
                        "memberCount": {
                          "type": "integer",
                          "description": "The number of members in the group",
                          "example": 1
                        },
                        "groupChatName": {
                          "type": "string",
                          "description": "The name of the created group",
                          "example": "Test Group"
                        }
                      },
                      "required": [
                        "groupId",
                        "memberCount",
                        "groupChatName"
                      ]
                    },
                    "invalidMembers": {
                      "type": "array",
                      "description": "List of invalid members (if any)",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the member",
                            "example": "Name"
                          },
                          "phone": {
                            "type": "string",
                            "description": "The phone number of the member",
                            "example": "919999999999"
                          }
                        },
                        "required": [
                          "phone"
                        ]
                      }
                    }
                  },
                  "required": [
                    "groupData",
                    "invalidMembers"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input provided"
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "delete": {
        "summary": "Delete groups",
        "description": "Deletes multiple groups",
        "operationId": "delete-groups",
        "tags": [
          "Broadcast Groups"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupIds": {
                    "type": "array",
                    "description": "The IDs of the group to delete",
                    "items": {
                      "type": "string",
                      "example": [
                        "group_usPBFQXZtY",
                        "group_CG0wH3AIQw"
                      ]
                    },
                    "minItems": 1,
                    "uniqueItems": true,
                    "example": [
                      "group_usPBFQXZtY",
                      "group_CG0wH3AIQw"
                    ]
                  }
                },
                "required": [
                  "groupIds"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK"
          },
          "400": {
            "description": "Bad request, invalid input provided"
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      },
      "get": {
        "summary": "Get paginated groups",
        "description": "Returns a list of paginated groups based on search criteria and pagination parameters",
        "tags": [
          "Broadcast Groups"
        ],
        "operationId": "get-paginated-groups-v2",
        "parameters": [
          {
            "in": "query",
            "name": "searchQuery",
            "schema": {
              "type": "string",
              "description": "Search query",
              "example": "group name"
            },
            "description": "The search query to filter groups"
          },
          {
            "in": "query",
            "name": "orderBy",
            "schema": {
              "type": "string",
              "description": "Order by",
              "example": "NAME",
              "enum": [
                "NAME",
                "DATE_CREATED"
              ]
            },
            "description": "The field to order the groups by"
          },
          {
            "in": "query",
            "name": "format",
            "schema": {
              "type": "string",
              "description": "Order format",
              "example": "ASCENDING",
              "enum": [
                "ASCENDING",
                "DESCENDING",
                "ascending",
                "descending"
              ]
            },
            "description": "The order format to apply to the groups"
          },
          {
            "in": "query",
            "name": "afterGroupId",
            "schema": {
              "type": "string",
              "description": "Group ID after which the groups are to be fetched",
              "example": "group_id"
            },
            "description": "The group ID to fetch the groups after"
          },
          {
            "in": "query",
            "name": "afterGroupName",
            "schema": {
              "type": "string",
              "description": "Group name after which the groups are to be fetched",
              "example": "group_name"
            },
            "description": "The group name to fetch the groups after"
          },
          {
            "in": "query",
            "name": "afterDateCreated",
            "schema": {
              "type": "string",
              "format": "date-time",
              "description": "Group date created after which the groups are to be fetched",
              "example": "2020-01-01T00:00:00.000Z"
            },
            "description": "The group creation date to fetch the groups after"
          }
        ],
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "groups": {
                      "description": "Array of groups",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "groupId": {
                            "type": "string",
                            "description": "Group ID",
                            "example": "group_id"
                          },
                          "groupChatId": {
                            "type": "string",
                            "description": "Group Chat ID",
                            "example": "group_chat_id"
                          },
                          "groupChatName": {
                            "type": "string",
                            "description": "Group chat name",
                            "example": "group_name"
                          },
                          "memberCount": {
                            "type": "string",
                            "description": "Total members in the group",
                            "example": 10
                          },
                          "canManageGroupAccess": {
                            "type": "boolean",
                            "description": "Boolean to check if the user can manage group access",
                            "example": true
                          },
                          "groupAccessLevel": {
                            "type": "string",
                            "description": "The level of access the user has to the group",
                            "example": "NO_ACCESS",
                            "enum": [
                              "FULL_ACCESS",
                              "SEND_ONLY_ACCESS",
                              "NO_ACCESS"
                            ]
                          }
                        }
                      }
                    },
                    "paginationParams": {
                      "description": "Pagination parameters",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "afterGroupId": {
                              "type": "string",
                              "description": "Group ID after which the groups are to be fetched",
                              "example": "group_id"
                            },
                            "afterGroupName": {
                              "type": "string",
                              "description": "Group name after which the groups are to be fetched",
                              "example": "group_name"
                            },
                            "afterDateCreated": {
                              "type": "string",
                              "description": "Group date created after which the groups are to be fetched",
                              "example": "2020-01-01T00:00:00.000Z"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input provided"
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/groups/add-members": {
      "post": {
        "summary": "Add members to a group",
        "description": "Adds members to an existing group",
        "tags": [
          "Broadcast Groups"
        ],
        "operationId": "add-members-to-group",
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "groupId": {
                    "type": "string",
                    "description": "The ID of the group to add members to",
                    "example": "group_usPBFQXZtY"
                  },
                  "members": {
                    "type": "array",
                    "description": "List of members to add",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "description": "The name of the member",
                          "example": "Name"
                        },
                        "phone": {
                          "type": "string",
                          "description": "The phone number of the member",
                          "example": "919999999999"
                        }
                      },
                      "required": [
                        "phone"
                      ]
                    }
                  }
                },
                "required": [
                  "groupId",
                  "members"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "invalidMembers": {
                      "type": "array",
                      "description": "List of members that could not be added",
                      "items": {
                        "type": "object",
                        "properties": {
                          "name": {
                            "type": "string",
                            "description": "The name of the member",
                            "example": "Name"
                          },
                          "phone": {
                            "type": "string",
                            "description": "The phone number of the member",
                            "example": "919999999999"
                          }
                        },
                        "required": [
                          "phone"
                        ]
                      }
                    },
                    "createdMembers": {
                      "type": "array",
                      "description": "List of members that were successfully added",
                      "items": {
                        "type": "string",
                        "example": [
                          "919999999999",
                          "919999999998"
                        ]
                      }
                    },
                    "membersAlreadyPresent": {
                      "type": "array",
                      "description": "List of phone numbers of members that were already in the group",
                      "items": {
                        "type": "string",
                        "example": [
                          "919999999999",
                          "919999999998"
                        ]
                      }
                    },
                    "groupId": {
                      "type": "string",
                      "description": "The ID of the group that members were added to",
                      "example": "group_inpkqRL8G2"
                    }
                  },
                  "required": [
                    "invalidMembers",
                    "createdMembers",
                    "membersAlreadyPresent",
                    "groupId"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Bad request, invalid input provided"
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/wallet/balance": {
      "get": {
        "summary": "Get wallet balance",
        "description": "Get wallet balance for Org",
        "tags": [
          "Wallet"
        ],
        "operationId": "get-wallet-balanace-for-org",
        "responses": {
          "200": {
            "description": "OK",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "currencyCode": {
                      "type": "string",
                      "description": "Currency code",
                      "example": "INR"
                    },
                    "balance": {
                      "type": "number",
                      "description": "The wallet balance",
                      "example": "3000"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Invalid or missing API key"
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team": {
      "get": {
        "operationId": "get-team",
        "summary": "Get Team",
        "description": "Get Team members with their Reporting Managers",
        "tags": [
          "Teams"
        ],
        "responses": {
          "200": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "data": {
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "id": {
                            "type": "string",
                            "description": "ID of the Team member"
                          },
                          "name": {
                            "type": "string",
                            "description": "Name of the Team member"
                          },
                          "phone": {
                            "type": "string",
                            "description": "Phone number of the Team member"
                          },
                          "email": {
                            "type": "string",
                            "description": "Email of the Team member"
                          },
                          "joinDate": {
                            "type": "string",
                            "format": "date-time",
                            "description": "Date when Team member joined"
                          },
                          "reportingManager": {
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "id": {
                                  "type": "string",
                                  "description": "ID of the Reporting Manager"
                                },
                                "name": {
                                  "type": "string",
                                  "description": "Name of the Reporting Manager"
                                },
                                "phone": {
                                  "type": "string",
                                  "description": "Phone number of the Reporting Manager"
                                },
                                "email": {
                                  "type": "string",
                                  "description": "Email of the Reporting Manager"
                                },
                                "joinDate": {
                                  "type": "string",
                                  "format": "date-time",
                                  "description": "Date when Reporting Manager joined"
                                }
                              }
                            }
                          },
                          "orgRoleName": {
                            "type": "string",
                            "description": "Name of the Organization Role"
                          },
                          "orgRoleId": {
                            "type": "string",
                            "description": "ID of the Organization Role"
                          },
                          "isOrganizationOwner": {
                            "type": "boolean",
                            "description": "Indicates whether the Team member is the owner of the Organization"
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team-member/reporting-manager": {
      "patch": {
        "operationId": "change-reporting-manager",
        "summary": "Change reporting manager",
        "description": "Change reporting manager of the user",
        "tags": [
          "Teams"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reportingManagerPhoneNumber": {
                    "type": "string",
                    "description": "Phone number of the reporting manager"
                  },
                  "memberPhoneNumber": {
                    "type": "string",
                    "description": "Phone number of the member"
                  }
                },
                "required": [
                  "reportingManagerPhoneNumber",
                  "memberPhoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "One or more user does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "One or more user does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team-member": {
      "delete": {
        "operationId": "remove-team-member",
        "summary": "Remove team member",
        "description": "Remove team member from team",
        "tags": [
          "Teams"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "memberPhoneNumber": {
                    "type": "string",
                    "description": "Phone number of the team member"
                  }
                },
                "required": [
                  "memberPhoneNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "User not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/team/members": {
      "post": {
        "operationId": "add-member-under-reporting-manager",
        "summary": "Add member under reporting manager",
        "description": "Add member under reporting manager",
        "tags": [
          "Teams"
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "reportingManagerPhoneNumber": {
                    "type": "string",
                    "minLength": 1
                  },
                  "members": {
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "name": {
                          "type": "string",
                          "minLength": 1
                        },
                        "phone": {
                          "type": "string",
                          "minLength": 1
                        },
                        "orgRoleId": {
                          "type": "string",
                          "minLength": 1
                        },
                        "wabaAccess": {
                          "type": "array",
                          "items": {
                            "type": "object",
                            "properties": {
                              "wabaNumber": {
                                "type": "string",
                                "minLength": 1
                              },
                              "wabaRoleId": {
                                "type": "string",
                                "minLength": 1
                              }
                            }
                          }
                        },
                        "addToTeamDirectly": {
                          "type": "boolean"
                        },
                        "sendInviteMessage": {
                          "type": "boolean"
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "success": {
                      "type": "boolean",
                      "description": "Indicates whether the operation was successful"
                    }
                  },
                  "required": [
                    "success"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Reporting manager does not exist.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "Reporting manager does not exist."
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/roles": {
      "get": {
        "operationId": "get-all-roles",
        "summary": "Get all roles",
        "description": "Get all roles",
        "tags": [
          "Roles"
        ],
        "responses": {
          "200": {
            "description": "Operation successfully completed",
            "content": {
              "application/json": {
                "schema": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string"
                      },
                      "name": {
                        "type": "string"
                      },
                      "description": {
                        "type": "string"
                      },
                      "type": {
                        "type": "string",
                        "enum": [
                          "ORG",
                          "WHATSAPP"
                        ]
                      },
                      "permissions": {
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "id": {
                              "type": "string"
                            },
                            "name": {
                              "type": "string"
                            },
                            "description": {
                              "type": "string"
                            }
                          }
                        }
                      },
                      "isCustomRole": {
                        "type": "boolean"
                      },
                      "dateCreated": {
                        "type": "string",
                        "format": "date-time"
                      },
                      "dateUpdated": {
                        "type": "string",
                        "format": "date-time"
                      }
                    },
                    "required": [
                      "roleId",
                      "roleName",
                      "description",
                      "type",
                      "permissions",
                      "isCustomRole",
                      "dateCreated",
                      "dateUpdated"
                    ]
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Roles not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "Roles not found"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/media/upload": {
      "post": {
        "summary": "Upload Media",
        "description": "Upload Media to use in messages",
        "operationId": "upload-media",
        "tags": [
          "Media"
        ],
        "parameters": [],
        "requestBody": {
          "content": {
            "multipart/form-data": {
              "schema": {
                "type": "object",
                "properties": {
                  "file": {
                    "type": "string",
                    "format": "binary"
                  }
                }
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Success",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "mediaUrl": {
                      "type": "string",
                      "description": "Media URL"
                    },
                    "expiresIn": {
                      "type": "integer",
                      "description": "Media URL expiration time in seconds"
                    }
                  },
                  "required": [
                    "mediaUrl",
                    "expiresIn"
                  ]
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "402": {
            "description": "File Size Exceeds max file size.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "File size is larger than the maximum allowed limit: 16777216 bytes."
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "File Type not supported.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "File type video/quicktime is not supported."
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v2/webhook/register": {
      "post": {
        "operationId": "register-webhook",
        "summary": "Register New Webhook",
        "description": "Register New Webhook",
        "tags": [
          "Webhook"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the webhook",
                    "example": "https://example.com/webhook"
                  },
                  "method": {
                    "type": "string",
                    "description": "HTTP method used for the webhook",
                    "enum": [
                      "GET",
                      "POST",
                      "PUT",
                      "DELETE",
                      "PATCH",
                      "HEAD"
                    ],
                    "example": "POST"
                  },
                  "headers": {
                    "type": "object",
                    "description": "Custom headers to be sent with the webhook",
                    "additionalProperties": true,
                    "example": {
                      "Authorization": "Bearer token"
                    }
                  },
                  "body": {
                    "type": "object",
                    "description": "Payload to be sent with the webhook",
                    "additionalProperties": true
                  },
                  "query": {
                    "type": "object",
                    "description": "Query parameters to be included in the webhook URL",
                    "additionalProperties": true
                  },
                  "bodyFormat": {
                    "type": "string",
                    "description": "Format of the body content",
                    "enum": [
                      "JSON",
                      "FORM_DATA"
                    ],
                    "example": "JSON"
                  },
                  "authorization": {
                    "type": "object",
                    "description": "Authorization details for the webhook",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of authorization used for the webhook",
                        "enum": [
                          "BASIC",
                          "BEARER"
                        ],
                        "example": "BEARER"
                      },
                      "payload": {
                        "type": "string",
                        "description": "The authorization payload, such as a token or credentials",
                        "example": "some-secure-token"
                      }
                    },
                    "required": [
                      "type",
                      "payload"
                    ]
                  },
                  "webhookEvents": {
                    "type": "array",
                    "description": "Events that trigger the webhook",
                    "items": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_RECEIVED",
                        "MESSAGE_STATUS_UPDATE",
                        "CHAT_ASSIGNED_TO_AGENT",
                        "CHAT_UNASSIGNED",
                        "UPDATE_CUSTOMER_CUSTOM_FIELD",
                        "WIDGET_LEAD_RECEIVED",
                        "VERIFIED_WIDGET_LEAD_RECEIVED",
                        "NEW_LEAD",
                        "RAW_CLOUD_API_WEBHOOK",
                        "CLOSE_CONVERSATION",
                        "TEMPLATE_UPDATE",
                        "ADD_TAG",
                        "REMOVE_TAG",
                        "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                        "CONVERSATION_OPENED",
                        "CUSTOMER_BUSINESS_CHAT_OPEN"
                      ]
                    },
                    "example": [
                      "MESSAGE_RECEIVED",
                      "CLOSE_CONVERSATION"
                    ]
                  },
                  "retryOnTimeout": {
                    "type": "boolean",
                    "description": "Retry the webhook call on timeout"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "wabaNumbers": {
                    "type": "array",
                    "description": "List of WABA numbers associated with the webhook",
                    "items": {
                      "type": "string",
                      "example": "+919999999999",
                      "minLength": 10,
                      "maxLength": 15,
                      "format": "phone"
                    }
                  }
                },
                "required": [
                  "url",
                  "method",
                  "webhookEvents",
                  "name",
                  "wabaNumbers"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Register New Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validWebhooks": {
                      "type": "array",
                      "description": "A list of valid webhooks",
                      "items": {
                        "type": "object",
                        "properties": {
                          "wabaNumber": {
                            "type": "string",
                            "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                            "example": "+919999999999"
                          },
                          "webhookEventType": {
                            "type": "string",
                            "description": "The type of event that triggers the webhook",
                            "enum": [
                              "MESSAGE_RECEIVED",
                              "MESSAGE_STATUS_UPDATE",
                              "CHAT_ASSIGNED_TO_AGENT",
                              "CHAT_UNASSIGNED",
                              "UPDATE_CUSTOMER_CUSTOM_FIELD",
                              "WIDGET_LEAD_RECEIVED",
                              "VERIFIED_WIDGET_LEAD_RECEIVED",
                              "NEW_LEAD",
                              "RAW_CLOUD_API_WEBHOOK",
                              "CLOSE_CONVERSATION",
                              "TEMPLATE_UPDATE",
                              "ADD_TAG",
                              "REMOVE_TAG",
                              "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                              "CONVERSATION_OPENED",
                              "CUSTOMER_BUSINESS_CHAT_OPEN"
                            ],
                            "example": "MESSAGE_RECEIVED"
                          }
                        },
                        "required": [
                          "wabaNumber",
                          "webhookEventType"
                        ]
                      },
                      "example": [
                        {
                          "wabaNumber": "+919999999999",
                          "webhookEventType": "MESSAGE_RECEIVED"
                        }
                      ]
                    },
                    "invalidWebhooks": {
                      "type": "array",
                      "description": "A list of invalid webhooks",
                      "items": {
                        "type": "object",
                        "properties": {
                          "wabaNumber": {
                            "type": "string",
                            "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                            "example": "+919999999999"
                          },
                          "webhookEventType": {
                            "type": "string",
                            "description": "The type of event that triggers the webhook",
                            "enum": [
                              "MESSAGE_RECEIVED",
                              "MESSAGE_STATUS_UPDATE",
                              "CHAT_ASSIGNED_TO_AGENT",
                              "CHAT_UNASSIGNED",
                              "UPDATE_CUSTOMER_CUSTOM_FIELD",
                              "WIDGET_LEAD_RECEIVED",
                              "VERIFIED_WIDGET_LEAD_RECEIVED",
                              "NEW_LEAD",
                              "RAW_CLOUD_API_WEBHOOK",
                              "CLOSE_CONVERSATION",
                              "TEMPLATE_UPDATE",
                              "ADD_TAG",
                              "REMOVE_TAG",
                              "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                              "CONVERSATION_OPENED",
                              "CUSTOMER_BUSINESS_CHAT_OPEN"
                            ],
                            "example": "MESSAGE_RECEIVED"
                          }
                        },
                        "required": [
                          "wabaNumber",
                          "webhookEventType"
                        ]
                      },
                      "example": [
                        {
                          "wabaNumber": "+918888888888",
                          "webhookEventType": "INVALID_EVENT"
                        }
                      ]
                    },
                    "invalidWabaNumbers": {
                      "type": "array",
                      "description": "A list of invalid WABA numbers",
                      "items": {
                        "type": "string",
                        "example": "+918888888880"
                      }
                    }
                  },
                  "required": [
                    "validWebhooks",
                    "invalidWebhooks",
                    "invalidWabaNumbers"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v2/webhooks": {
      "get": {
        "operationId": "get-webhooks",
        "summary": "Get Webhooks",
        "description": "Get Webhooks",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "query",
            "name": "sortBy",
            "schema": {
              "type": "string",
              "description": "Sort by",
              "example": "name",
              "enum": [
                "name",
                "url",
                "createdBy",
                "integrationCount"
              ]
            },
            "description": "Sort by",
            "required": false
          },
          {
            "in": "query",
            "name": "sortDirection",
            "schema": {
              "type": "string",
              "description": "Sort direction",
              "example": "DESC",
              "enum": [
                "ASC",
                "DESC"
              ]
            },
            "description": "Sort direction",
            "required": false
          }
        ],
        "responses": {
          "201": {
            "description": "Get Webhooks",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "webhookId": {
                      "type": "string",
                      "description": "The unique identifier of the webhook",
                      "example": "abc123"
                    },
                    "url": {
                      "type": "string",
                      "format": "uri",
                      "description": "The URL of the webhook",
                      "example": "https://example.com/webhook"
                    },
                    "eventTypes": {
                      "type": "array",
                      "description": "A list of event types that the webhook listens to",
                      "items": {
                        "type": "string",
                        "example": "MESSAGE_RECEIVED"
                      },
                      "example": [
                        "MESSAGE_RECEIVED",
                        "MESSAGE_SENT"
                      ]
                    },
                    "wabaNumbers": {
                      "type": "array",
                      "description": "A list of WABA Numbers associated with the webhook",
                      "items": {
                        "type": "string",
                        "example": "+919999999999"
                      },
                      "example": [
                        "+919999999999",
                        "+918888888888"
                      ]
                    },
                    "integrationCount": {
                      "type": "integer",
                      "description": "The count of integrations associated with the webhook",
                      "example": 2
                    },
                    "createdBy": {
                      "type": "string",
                      "description": "The user who created the webhook",
                      "example": "admin"
                    },
                    "name": {
                      "type": "string",
                      "description": "The name of the webhook",
                      "example": "My Webhook"
                    }
                  },
                  "required": [
                    "webhookId",
                    "url",
                    "eventTypes",
                    "wabaNumbers",
                    "integrationCount",
                    "createdBy",
                    "name"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v2/webhook/deregister": {
      "delete": {
        "operationId": "delete-webhooks",
        "summary": "Delete Webhooks",
        "description": "Delete Webhooks",
        "tags": [
          "Webhook"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "webhookId": {
                    "type": "string",
                    "description": "The unique identifier of the webhook to be deregistered"
                  }
                },
                "required": [
                  "webhookId"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Deregister Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {},
                  "description": "Empty response body indicating successful creation"
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/v2/webhook/{webhookId}": {
      "post": {
        "operationId": "edit-webhooks",
        "summary": "Edit Webhooks",
        "description": "Edit Webhooks",
        "tags": [
          "Webhook"
        ],
        "parameters": [
          {
            "in": "path",
            "name": "webhookId",
            "required": true,
            "schema": {
              "type": "string"
            },
            "description": "The webhook ID"
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "url": {
                    "type": "string",
                    "format": "uri",
                    "description": "URL of the webhook",
                    "example": "https://example.com/webhook"
                  },
                  "method": {
                    "type": "string",
                    "description": "HTTP method used for the webhook",
                    "enum": [
                      "GET",
                      "POST",
                      "PUT",
                      "DELETE",
                      "PATCH",
                      "HEAD"
                    ],
                    "example": "POST"
                  },
                  "headers": {
                    "type": "object",
                    "description": "Custom headers to be sent with the webhook",
                    "additionalProperties": true,
                    "example": {
                      "Authorization": "Bearer token"
                    }
                  },
                  "body": {
                    "type": "object",
                    "description": "Payload to be sent with the webhook",
                    "additionalProperties": true
                  },
                  "query": {
                    "type": "object",
                    "description": "Query parameters to be included in the webhook URL",
                    "additionalProperties": true
                  },
                  "bodyFormat": {
                    "type": "string",
                    "description": "Format of the body content",
                    "enum": [
                      "JSON",
                      "FORM_DATA"
                    ],
                    "example": "JSON"
                  },
                  "authorization": {
                    "type": "object",
                    "description": "Authorization details for the webhook",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "The type of authorization used for the webhook",
                        "enum": [
                          "BASIC",
                          "BEARER"
                        ],
                        "example": "BEARER"
                      },
                      "payload": {
                        "type": "string",
                        "description": "The authorization payload, such as a token or credentials",
                        "example": "some-secure-token"
                      }
                    },
                    "required": [
                      "type",
                      "payload"
                    ]
                  },
                  "webhookEvents": {
                    "type": "array",
                    "description": "Events that trigger the webhook",
                    "items": {
                      "type": "string",
                      "enum": [
                        "MESSAGE_RECEIVED",
                        "MESSAGE_STATUS_UPDATE",
                        "CHAT_ASSIGNED_TO_AGENT",
                        "CHAT_UNASSIGNED",
                        "UPDATE_CUSTOMER_CUSTOM_FIELD",
                        "WIDGET_LEAD_RECEIVED",
                        "VERIFIED_WIDGET_LEAD_RECEIVED",
                        "NEW_LEAD",
                        "RAW_CLOUD_API_WEBHOOK",
                        "CLOSE_CONVERSATION",
                        "TEMPLATE_UPDATE",
                        "ADD_TAG",
                        "REMOVE_TAG",
                        "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                        "CONVERSATION_OPENED",
                        "CUSTOMER_BUSINESS_CHAT_OPEN"
                      ]
                    },
                    "example": [
                      "MESSAGE_RECEIVED",
                      "CLOSE_CONVERSATION"
                    ]
                  },
                  "retryOnTimeout": {
                    "type": "boolean",
                    "description": "Retry the webhook call on timeout"
                  },
                  "name": {
                    "type": "string",
                    "description": "Name of the webhook"
                  },
                  "wabaNumbers": {
                    "type": "array",
                    "description": "List of WABA numbers associated with the webhook",
                    "items": {
                      "type": "string",
                      "example": "+919999999999",
                      "minLength": 10,
                      "maxLength": 15,
                      "format": "phone"
                    }
                  }
                },
                "required": [
                  "url",
                  "method",
                  "webhookEvents",
                  "name",
                  "wabaNumbers"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Edit Webhook",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "validWebhooks": {
                      "type": "array",
                      "description": "A list of valid webhooks",
                      "items": {
                        "type": "object",
                        "properties": {
                          "wabaNumber": {
                            "type": "string",
                            "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                            "example": "+919999999999"
                          },
                          "webhookEventType": {
                            "type": "string",
                            "description": "The type of event that triggers the webhook",
                            "enum": [
                              "MESSAGE_RECEIVED",
                              "MESSAGE_STATUS_UPDATE",
                              "CHAT_ASSIGNED_TO_AGENT",
                              "CHAT_UNASSIGNED",
                              "UPDATE_CUSTOMER_CUSTOM_FIELD",
                              "WIDGET_LEAD_RECEIVED",
                              "VERIFIED_WIDGET_LEAD_RECEIVED",
                              "NEW_LEAD",
                              "RAW_CLOUD_API_WEBHOOK",
                              "CLOSE_CONVERSATION",
                              "TEMPLATE_UPDATE",
                              "ADD_TAG",
                              "REMOVE_TAG",
                              "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                              "CONVERSATION_OPENED",
                              "CUSTOMER_BUSINESS_CHAT_OPEN"
                            ],
                            "example": "MESSAGE_RECEIVED"
                          }
                        },
                        "required": [
                          "wabaNumber",
                          "webhookEventType"
                        ]
                      },
                      "example": [
                        {
                          "wabaNumber": "+919999999999",
                          "webhookEventType": "MESSAGE_RECEIVED"
                        }
                      ]
                    },
                    "invalidWebhooks": {
                      "type": "array",
                      "description": "A list of invalid webhooks",
                      "items": {
                        "type": "object",
                        "properties": {
                          "wabaNumber": {
                            "type": "string",
                            "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                            "example": "+919999999999"
                          },
                          "webhookEventType": {
                            "type": "string",
                            "description": "The type of event that triggers the webhook",
                            "enum": [
                              "MESSAGE_RECEIVED",
                              "MESSAGE_STATUS_UPDATE",
                              "CHAT_ASSIGNED_TO_AGENT",
                              "CHAT_UNASSIGNED",
                              "UPDATE_CUSTOMER_CUSTOM_FIELD",
                              "WIDGET_LEAD_RECEIVED",
                              "VERIFIED_WIDGET_LEAD_RECEIVED",
                              "NEW_LEAD",
                              "RAW_CLOUD_API_WEBHOOK",
                              "CLOSE_CONVERSATION",
                              "TEMPLATE_UPDATE",
                              "ADD_TAG",
                              "REMOVE_TAG",
                              "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                              "CONVERSATION_OPENED",
                              "CUSTOMER_BUSINESS_CHAT_OPEN"
                            ],
                            "example": "MESSAGE_RECEIVED"
                          }
                        },
                        "required": [
                          "wabaNumber",
                          "webhookEventType"
                        ]
                      },
                      "example": [
                        {
                          "wabaNumber": "+918888888888",
                          "webhookEventType": "INVALID_EVENT"
                        }
                      ]
                    },
                    "invalidWabaNumbers": {
                      "type": "array",
                      "description": "A list of invalid WABA numbers",
                      "items": {
                        "type": "string",
                        "example": "+918888888880"
                      }
                    }
                  },
                  "required": [
                    "validWebhooks",
                    "invalidWebhooks",
                    "invalidWabaNumbers"
                  ]
                }
              }
            }
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "string",
                      "example": "Bad Request"
                    },
                    "error": {
                      "type": "string",
                      "example": "Error Text"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Unauthorized"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    },
    "/customer/assign": {
      "post": {
        "operationId": "assign-team-member-to-customer",
        "summary": "Assign team member to customer",
        "description": " Assign team member to customer ",
        "tags": [
          "Customer"
        ],
        "parameters": [],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "type": "object",
                "properties": {
                  "customerPhoneNumber": {
                    "description": "Phone number of customer",
                    "type": "string",
                    "example": "917838849957",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "assignedUserPhoneNumber": {
                    "description": "Phone number of user",
                    "type": "string",
                    "example": "917838849957",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  },
                  "wabaNumber": {
                    "type": "string",
                    "description": "Integration Waba Number with country code",
                    "example": "919876543210",
                    "minLength": 7,
                    "maxLength": 15,
                    "format": "phone"
                  }
                },
                "required": [
                  "customerPhoneNumber",
                  "assignedUserPhoneNumber",
                  "wabaNumber"
                ]
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": ""
          },
          "400": {
            "description": "Incorrect payload",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 400
                    },
                    "message": {
                      "type": "array",
                      "items": {
                        "type": "string",
                        "example": "phoneNumber must be a string"
                      }
                    },
                    "error": {
                      "type": "string",
                      "example": "Bad Request"
                    }
                  }
                }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 401
                    },
                    "message": {
                      "type": "string",
                      "example": "Invalid public api key"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unauthorized"
                    }
                  }
                }
              }
            }
          },
          "403": {
            "description": "Access forbidden",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 403
                    },
                    "message": {
                      "type": "string",
                      "example": "Team member +1234567890 does not have access to WhatsApp API Number +9876543210"
                    },
                    "error": {
                      "type": "string",
                      "example": "Forbidden"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Resource not found",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 404
                    },
                    "message": {
                      "type": "string",
                      "example": "wabaNumber not found"
                    },
                    "error": {
                      "type": "string",
                      "example": "Not Found"
                    }
                  }
                }
              }
            }
          },
          "422": {
            "description": "Unprocessable Entity",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "statusCode": {
                      "type": "number",
                      "example": 422
                    },
                    "message": {
                      "type": "string",
                      "example": "User is not a member of the team"
                    },
                    "error": {
                      "type": "string",
                      "example": "Unprocessable Entity"
                    }
                  }
                }
              }
            }
          }
        },
        "security": [
          {
            "basic": []
          }
        ]
      }
    }
  },
  "info": {
    "title": "DoubleTick Public APIs",
    "description": "",
    "version": "2.0",
    "contact": {}
  },
  "tags": [],
  "servers": [
    {
      "url": "https://public.doubletick.io"
    }
  ],
  "components": {
    "securitySchemes": {
      "basic": {
        "type": "apiKey",
        "name": "Authorization",
        "in": "header",
        "description": "Public API Key"
      }
    },
    "schemas": {
      "GetWalletBalanceForOrgReponseDto": {
        "type": "object",
        "properties": {
          "currencyCode": {
            "type": "string",
            "description": "Currency code",
            "example": "INR"
          },
          "balance": {
            "type": "number",
            "description": "The wallet balance",
            "example": "3000"
          }
        }
      },
      "SendTextMessageContentDto": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text message to be sent",
            "example": "Hello, world!"
          }
        },
        "required": [
          "text"
        ]
      },
      "SendWhatsappTextMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Text message to be sent",
            "example": {
              "text": "Hello, world!",
              "previewUrl": true
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "The text message to be sent",
                    "example": "Hello, world!"
                  }
                },
                "required": [
                  "text"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "ExportChatsDto": {
        "type": "object",
        "properties": {
          "customerPhoneNumber": {
            "type": "string",
            "description": "The phone number of customer",
            "example": "919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "wabaNumber": {
            "type": "string",
            "description": "The wabaNumber of integration for which you want to export chats",
            "example": "919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "startDate": {
            "type": "string",
            "description": "The starting date from which chat messages will be exported. This date should be formatted as 'DD-MM-YYYY'.",
            "example": "14-05-2024"
          },
          "endDate": {
            "type": "string",
            "description": "The ending date up to which chat messages will be exported. This date should also be formatted as 'DD-MM-YYYY'.",
            "example": "20-05-2024"
          },
          "includeMedia": {
            "type": "boolean",
            "description": "If true then it will include shared media link",
            "example": true
          }
        },
        "required": [
          "customerPhoneNumber",
          "wabaNumber",
          "startDate",
          "endDate",
          "includeMedia"
        ]
      },
      "SendWhatsappInteractiveMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Text message to be sent",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "type": "string",
                    "description": "The header text to be sent",
                    "maxLength": 60,
                    "example": "Header text"
                  },
                  "body": {
                    "type": "string",
                    "description": "The body of the message to be sent",
                    "maxLength": 1024,
                    "example": "Message body"
                  },
                  "footer": {
                    "type": "string",
                    "description": "The footer text to be sent",
                    "maxLength": 20,
                    "example": "Footer text"
                  },
                  "buttons": {
                    "type": "array",
                    "description": "Array of buttons to be sent",
                    "items": {
                      "type": "object",
                      "properties": {
                        "id": {
                          "type": "string",
                          "description": "A unique identifier",
                          "maxLength": 60,
                          "example": "uuid-v4"
                        },
                        "title": {
                          "type": "string",
                          "description": "The title of button to be displayed",
                          "maxLength": 20,
                          "example": "Button title"
                        }
                      },
                      "required": [
                        "id",
                        "title"
                      ]
                    }
                  }
                },
                "required": [
                  "body",
                  "buttons"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendInteractiveMessageContentDto": {
        "type": "object",
        "properties": {
          "header": {
            "type": "string",
            "description": "The header text to be sent",
            "maxLength": 60,
            "example": "Header text"
          },
          "body": {
            "type": "string",
            "description": "The body of the message to be sent",
            "maxLength": 1024,
            "example": "Message body"
          },
          "footer": {
            "type": "string",
            "description": "The footer text to be sent",
            "maxLength": 20,
            "example": "Footer text"
          },
          "buttons": {
            "type": "array",
            "description": "Array of buttons to be sent",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier",
                  "maxLength": 60,
                  "example": "uuid-v4"
                },
                "title": {
                  "type": "string",
                  "description": "The title of button to be displayed",
                  "maxLength": 20,
                  "example": "Button title"
                }
              },
              "required": [
                "id",
                "title"
              ]
            }
          }
        },
        "required": [
          "body",
          "buttons"
        ]
      },
      "SendInteractiveMessageButtonDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "maxLength": 60,
            "example": "uuid-v4"
          },
          "title": {
            "type": "string",
            "description": "The title of button to be displayed",
            "maxLength": 20,
            "example": "Button title"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "SendWhatsappInteractiveListMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Text message to be sent",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "type": "string",
                    "description": "The header text to be sent",
                    "maxLength": 60,
                    "example": "Header text"
                  },
                  "body": {
                    "type": "string",
                    "description": "The body of the message to be sent",
                    "maxLength": 1024,
                    "example": "Message body"
                  },
                  "footer": {
                    "type": "string",
                    "description": "The footer text to be sent",
                    "maxLength": 20,
                    "example": "Footer text"
                  },
                  "button": {
                    "type": "string",
                    "description": "The button for opening the list",
                    "maxLength": 20,
                    "example": "Button text"
                  },
                  "sections": {
                    "type": "array",
                    "description": "Array of sections to be sent",
                    "items": {
                      "type": "object",
                      "properties": {
                        "title": {
                          "type": "string",
                          "description": "The title of section to be displayed",
                          "maxLength": 24,
                          "example": "Section title"
                        },
                        "rows": {
                          "type": "array",
                          "description": "Array of sections to be sent",
                          "items": {
                            "type": "object",
                            "properties": {
                              "id": {
                                "type": "string",
                                "description": "A unique identifier",
                                "maxLength": 60,
                                "example": "uuid-v4"
                              },
                              "title": {
                                "type": "string",
                                "description": "The title of row to be displayed",
                                "maxLength": 24,
                                "example": "Row title"
                              },
                              "description": {
                                "type": "string",
                                "description": "The description of row to be displayed",
                                "maxLength": 72,
                                "example": "Row description"
                              }
                            },
                            "required": [
                              "id",
                              "title"
                            ]
                          }
                        }
                      },
                      "required": [
                        "rows"
                      ]
                    }
                  }
                },
                "required": [
                  "body",
                  "button",
                  "sections"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendInteractiveListMessageContentDto": {
        "type": "object",
        "properties": {
          "header": {
            "type": "string",
            "description": "The header text to be sent",
            "maxLength": 60,
            "example": "Header text"
          },
          "body": {
            "type": "string",
            "description": "The body of the message to be sent",
            "maxLength": 1024,
            "example": "Message body"
          },
          "footer": {
            "type": "string",
            "description": "The footer text to be sent",
            "maxLength": 20,
            "example": "Footer text"
          },
          "button": {
            "type": "string",
            "description": "The button for opening the list",
            "maxLength": 20,
            "example": "Button text"
          },
          "sections": {
            "type": "array",
            "description": "Array of sections to be sent",
            "items": {
              "type": "object",
              "properties": {
                "title": {
                  "type": "string",
                  "description": "The title of section to be displayed",
                  "maxLength": 24,
                  "example": "Section title"
                },
                "rows": {
                  "type": "array",
                  "description": "Array of sections to be sent",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "A unique identifier",
                        "maxLength": 60,
                        "example": "uuid-v4"
                      },
                      "title": {
                        "type": "string",
                        "description": "The title of row to be displayed",
                        "maxLength": 24,
                        "example": "Row title"
                      },
                      "description": {
                        "type": "string",
                        "description": "The description of row to be displayed",
                        "maxLength": 72,
                        "example": "Row description"
                      }
                    },
                    "required": [
                      "id",
                      "title"
                    ]
                  }
                }
              },
              "required": [
                "rows"
              ]
            }
          }
        },
        "required": [
          "body",
          "button",
          "sections"
        ]
      },
      "SendInteractiveListMessageSectionDto": {
        "type": "object",
        "properties": {
          "title": {
            "type": "string",
            "description": "The title of section to be displayed",
            "maxLength": 24,
            "example": "Section title"
          },
          "rows": {
            "type": "array",
            "description": "Array of sections to be sent",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "A unique identifier",
                  "maxLength": 60,
                  "example": "uuid-v4"
                },
                "title": {
                  "type": "string",
                  "description": "The title of row to be displayed",
                  "maxLength": 24,
                  "example": "Row title"
                },
                "description": {
                  "type": "string",
                  "description": "The description of row to be displayed",
                  "maxLength": 72,
                  "example": "Row description"
                }
              },
              "required": [
                "id",
                "title"
              ]
            }
          }
        },
        "required": [
          "rows"
        ]
      },
      "SendInteractiveListMessageRowDto": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "A unique identifier",
            "maxLength": 60,
            "example": "uuid-v4"
          },
          "title": {
            "type": "string",
            "description": "The title of row to be displayed",
            "maxLength": 24,
            "example": "Row title"
          },
          "description": {
            "type": "string",
            "description": "The description of row to be displayed",
            "maxLength": 72,
            "example": "Row description"
          }
        },
        "required": [
          "id",
          "title"
        ]
      },
      "SendVideoMessageContentDto": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "description": "URL of the media to be sent",
            "minLength": 1,
            "maxLength": 2048,
            "example": "https://example.com/image.jpg"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media",
            "minLength": 1,
            "maxLength": 3000,
            "example": "This is a caption"
          }
        },
        "required": [
          "mediaUrl"
        ]
      },
      "SendWhatsappVideoMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Video message to be sent",
            "example": {
              "url": "https://example.com/video.mp4",
              "caption": "Some caption"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "mediaUrl": {
                    "type": "string",
                    "description": "URL of the media to be sent",
                    "minLength": 1,
                    "maxLength": 2048,
                    "example": "https://example.com/image.jpg"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Caption for the media",
                    "minLength": 1,
                    "maxLength": 3000,
                    "example": "This is a caption"
                  }
                },
                "required": [
                  "mediaUrl"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendAudioMessageContentDto": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "description": "URL of the media to be sent",
            "minLength": 1,
            "maxLength": 2048,
            "example": "https://example.com/image.jpg"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media",
            "minLength": 1,
            "maxLength": 3000,
            "example": "This is a caption"
          }
        },
        "required": [
          "mediaUrl"
        ]
      },
      "SendWhatsappAudioMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Audio message to be sent",
            "example": {
              "url": "https://www.soundhelix.com/examples/mp3/SoundHelix-Song-1.mp3",
              "caption": "Some caption"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "mediaUrl": {
                    "type": "string",
                    "description": "URL of the media to be sent",
                    "minLength": 1,
                    "maxLength": 2048,
                    "example": "https://example.com/image.jpg"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Caption for the media",
                    "minLength": 1,
                    "maxLength": 3000,
                    "example": "This is a caption"
                  }
                },
                "required": [
                  "mediaUrl"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendImageMessageContentDto": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "description": "URL of the media to be sent",
            "minLength": 1,
            "maxLength": 2048,
            "example": "https://example.com/image.jpg"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media",
            "minLength": 1,
            "maxLength": 3000,
            "example": "This is a caption"
          }
        },
        "required": [
          "mediaUrl"
        ]
      },
      "SendWhatsappImageMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Image message to be sent",
            "example": {
              "url": "https://example.com/image.jpg",
              "caption": "Some caption"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "mediaUrl": {
                    "type": "string",
                    "description": "URL of the media to be sent",
                    "minLength": 1,
                    "maxLength": 2048,
                    "example": "https://example.com/image.jpg"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Caption for the media",
                    "minLength": 1,
                    "maxLength": 3000,
                    "example": "This is a caption"
                  }
                },
                "required": [
                  "mediaUrl"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendDocumentMessageContentDto": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "description": "URL of the media to be sent",
            "minLength": 1,
            "maxLength": 2048,
            "example": "https://example.com/image.jpg"
          },
          "caption": {
            "type": "string",
            "description": "Caption for the media",
            "minLength": 1,
            "maxLength": 3000,
            "example": "This is a caption"
          },
          "filename": {
            "type": "string",
            "description": "The filename of the document",
            "example": "Example File Name"
          }
        },
        "required": [
          "mediaUrl"
        ]
      },
      "SendWhatsappDocumentMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Document message to be sent",
            "example": {
              "url": "https://example.com/document.pdf",
              "caption": "Some caption",
              "filename": "Example File Name"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "mediaUrl": {
                    "type": "string",
                    "description": "URL of the media to be sent",
                    "minLength": 1,
                    "maxLength": 2048,
                    "example": "https://example.com/image.jpg"
                  },
                  "caption": {
                    "type": "string",
                    "description": "Caption for the media",
                    "minLength": 1,
                    "maxLength": 3000,
                    "example": "This is a caption"
                  },
                  "filename": {
                    "type": "string",
                    "description": "The filename of the document",
                    "example": "Example File Name"
                  }
                },
                "required": [
                  "mediaUrl"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendTemplateMessageContentTemplateDataHeaderDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Template header type",
            "enum": [
              "TEXT",
              "IMAGE",
              "DOCUMENT",
              "VIDEO",
              "LOCATION"
            ],
            "example": "TEXT"
          },
          "placeholder": {
            "type": "string",
            "description": "Template header text",
            "example": "Header text"
          },
          "mediaUrl": {
            "type": "string",
            "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
            "example": "https://example.com/image.png"
          },
          "filename": {
            "type": "string",
            "description": "Template header document caption",
            "example": "Document caption"
          },
          "latitude": {
            "type": "number",
            "description": "Template header location latitude",
            "example": -23.5505199
          },
          "longitude": {
            "type": "number",
            "description": "Template header location longitude",
            "example": -46.6333094
          }
        }
      },
      "SendTemplateMessageContentTemplateDataBodyDto": {
        "type": "object",
        "properties": {
          "placeholders": {
            "description": "Template body components",
            "example": [
              "Body text"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          }
        },
        "required": [
          "placeholders"
        ]
      },
      "SendTemplateMessageContentTemplateDataButtonDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Template button type",
            "enum": [
              "URL"
            ],
            "example": "URL"
          },
          "parameter": {
            "type": "string",
            "description": "Template button text (Required only when the URL is dynamic)",
            "example": "Button text"
          }
        },
        "required": [
          "type"
        ]
      },
      "SendTemplateMessageContentTemplateCarouselCardsDto": {
        "type": "object",
        "properties": {
          "cardIndex": {
            "type": "number",
            "description": "Index of the card - 0 Represents the first card",
            "example": "0"
          },
          "components": {
            "type": "object",
            "description": "Carousel cards components",
            "properties": {
              "header": {
                "description": "Carousel card header",
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Carousel card header type",
                    "enum": [
                      "IMAGE",
                      "VIDEO"
                    ],
                    "example": "IMAGE"
                  },
                  "mediaUrl": {
                    "type": "string",
                    "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                    "example": "https://example.com/image.png"
                  }
                }
              },
              "body": {
                "description": "Carousel card body",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "placeholders": {
                        "description": "Template body components",
                        "example": [
                          "Body text"
                        ],
                        "type": "array",
                        "items": {
                          "type": "string"
                        }
                      }
                    },
                    "required": [
                      "placeholders"
                    ]
                  }
                ]
              },
              "buttons": {
                "description": "Carousel card buttons",
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "description": "Template button type",
                      "enum": [
                        "URL"
                      ],
                      "example": "URL"
                    },
                    "parameter": {
                      "type": "string",
                      "description": "Template button text (Required only when the URL is dynamic)",
                      "example": "Button text"
                    }
                  },
                  "required": [
                    "type"
                  ]
                }
              }
            }
          }
        },
        "required": [
          "type"
        ]
      },
      "SendTemplateMessageContentTemplateDataDto": {
        "type": "object",
        "properties": {
          "header": {
            "description": "Template header",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "type": {
                    "type": "string",
                    "description": "Template header type",
                    "enum": [
                      "TEXT",
                      "IMAGE",
                      "DOCUMENT",
                      "VIDEO",
                      "LOCATION"
                    ],
                    "example": "TEXT"
                  },
                  "placeholder": {
                    "type": "string",
                    "description": "Template header text",
                    "example": "Header text"
                  },
                  "mediaUrl": {
                    "type": "string",
                    "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                    "example": "https://example.com/image.png"
                  },
                  "filename": {
                    "type": "string",
                    "description": "Template header document caption",
                    "example": "Document caption"
                  },
                  "latitude": {
                    "type": "number",
                    "description": "Template header location latitude",
                    "example": -23.5505199
                  },
                  "longitude": {
                    "type": "number",
                    "description": "Template header location longitude",
                    "example": -46.6333094
                  }
                }
              }
            ]
          },
          "body": {
            "description": "Template body",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "placeholders": {
                    "description": "Template body components",
                    "example": [
                      "Body text"
                    ],
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "placeholders"
                ]
              }
            ]
          },
          "buttons": {
            "description": "Template buttons",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Template button type",
                  "enum": [
                    "URL"
                  ],
                  "example": "URL"
                },
                "parameter": {
                  "type": "string",
                  "description": "Template button text (Required only when the URL is dynamic)",
                  "example": "Button text"
                }
              },
              "required": [
                "type"
              ]
            }
          },
          "cards": {
            "description": "Template carousel cards",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "cardIndex": {
                  "type": "number",
                  "description": "Index of the card - 0 Represents the first card",
                  "example": "0"
                },
                "components": {
                  "type": "object",
                  "description": "Carousel cards components",
                  "properties": {
                    "header": {
                      "description": "Carousel card header",
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Carousel card header type",
                          "enum": [
                            "IMAGE",
                            "VIDEO"
                          ],
                          "example": "IMAGE"
                        },
                        "mediaUrl": {
                          "type": "string",
                          "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                          "example": "https://example.com/image.png"
                        }
                      }
                    },
                    "body": {
                      "description": "Carousel card body",
                      "allOf": [
                        {
                          "type": "object",
                          "properties": {
                            "placeholders": {
                              "description": "Template body components",
                              "example": [
                                "Body text"
                              ],
                              "type": "array",
                              "items": {
                                "type": "string"
                              }
                            }
                          },
                          "required": [
                            "placeholders"
                          ]
                        }
                      ]
                    },
                    "buttons": {
                      "description": "Carousel card buttons",
                      "type": "array",
                      "items": {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Template button type",
                            "enum": [
                              "URL"
                            ],
                            "example": "URL"
                          },
                          "parameter": {
                            "type": "string",
                            "description": "Template button text (Required only when the URL is dynamic)",
                            "example": "Button text"
                          }
                        },
                        "required": [
                          "type"
                        ]
                      }
                    }
                  }
                }
              },
              "required": [
                "type"
              ]
            }
          }
        }
      },
      "SendTemplateMessageContentDto": {
        "type": "object",
        "properties": {
          "templateName": {
            "type": "string",
            "description": "Template name",
            "example": "template_name"
          },
          "language": {
            "type": "string",
            "description": "Template language",
            "example": "en",
            "default": "en",
            "enum": [
              "en",
              "en_US",
              "en_GB",
              "pt_BR",
              "es",
              "id"
            ]
          },
          "templateData": {
            "description": "Template data",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "Template header",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "type": {
                            "type": "string",
                            "description": "Template header type",
                            "enum": [
                              "TEXT",
                              "IMAGE",
                              "DOCUMENT",
                              "VIDEO",
                              "LOCATION"
                            ],
                            "example": "TEXT"
                          },
                          "placeholder": {
                            "type": "string",
                            "description": "Template header text",
                            "example": "Header text"
                          },
                          "mediaUrl": {
                            "type": "string",
                            "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                            "example": "https://example.com/image.png"
                          },
                          "filename": {
                            "type": "string",
                            "description": "Template header document caption",
                            "example": "Document caption"
                          },
                          "latitude": {
                            "type": "number",
                            "description": "Template header location latitude",
                            "example": -23.5505199
                          },
                          "longitude": {
                            "type": "number",
                            "description": "Template header location longitude",
                            "example": -46.6333094
                          }
                        }
                      }
                    ]
                  },
                  "body": {
                    "description": "Template body",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "placeholders": {
                            "description": "Template body components",
                            "example": [
                              "Body text"
                            ],
                            "type": "array",
                            "items": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "placeholders"
                        ]
                      }
                    ]
                  },
                  "buttons": {
                    "description": "Template buttons",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Template button type",
                          "enum": [
                            "URL"
                          ],
                          "example": "URL"
                        },
                        "parameter": {
                          "type": "string",
                          "description": "Template button text (Required only when the URL is dynamic)",
                          "example": "Button text"
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  },
                  "cards": {
                    "description": "Template carousel cards",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "cardIndex": {
                          "type": "number",
                          "description": "Index of the card - 0 Represents the first card",
                          "example": "0"
                        },
                        "components": {
                          "type": "object",
                          "description": "Carousel cards components",
                          "properties": {
                            "header": {
                              "description": "Carousel card header",
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Carousel card header type",
                                  "enum": [
                                    "IMAGE",
                                    "VIDEO"
                                  ],
                                  "example": "IMAGE"
                                },
                                "mediaUrl": {
                                  "type": "string",
                                  "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                  "example": "https://example.com/image.png"
                                }
                              }
                            },
                            "body": {
                              "description": "Carousel card body",
                              "allOf": [
                                {
                                  "type": "object",
                                  "properties": {
                                    "placeholders": {
                                      "description": "Template body components",
                                      "example": [
                                        "Body text"
                                      ],
                                      "type": "array",
                                      "items": {
                                        "type": "string"
                                      }
                                    }
                                  },
                                  "required": [
                                    "placeholders"
                                  ]
                                }
                              ]
                            },
                            "buttons": {
                              "description": "Carousel card buttons",
                              "type": "array",
                              "items": {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Template button type",
                                    "enum": [
                                      "URL"
                                    ],
                                    "example": "URL"
                                  },
                                  "parameter": {
                                    "type": "string",
                                    "description": "Template button text (Required only when the URL is dynamic)",
                                    "example": "Button text"
                                  }
                                },
                                "required": [
                                  "type"
                                ]
                              }
                            }
                          }
                        }
                      },
                      "required": [
                        "type"
                      ]
                    }
                  }
                }
              }
            ]
          }
        },
        "required": [
          "templateName",
          "language"
        ]
      },
      "SendWhatsappTemplateMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Template message to be sent",
            "example": {
              "templateName": "text_template",
              "language": "en",
              "templateData": {
                "header": {
                  "type": "TEXT",
                  "placeholder": "Saurav"
                },
                "body": {
                  "placeholders": [
                    "Saurav",
                    "https://saurav.catalog.to"
                  ]
                }
              }
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "templateName": {
                    "type": "string",
                    "description": "Template name",
                    "example": "template_name"
                  },
                  "language": {
                    "type": "string",
                    "description": "Template language",
                    "example": "en",
                    "default": "en",
                    "enum": [
                      "en",
                      "en_US",
                      "en_GB",
                      "pt_BR",
                      "es",
                      "id"
                    ]
                  },
                  "templateData": {
                    "description": "Template data",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "header": {
                            "description": "Template header",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "type": {
                                    "type": "string",
                                    "description": "Template header type",
                                    "enum": [
                                      "TEXT",
                                      "IMAGE",
                                      "DOCUMENT",
                                      "VIDEO",
                                      "LOCATION"
                                    ],
                                    "example": "TEXT"
                                  },
                                  "placeholder": {
                                    "type": "string",
                                    "description": "Template header text",
                                    "example": "Header text"
                                  },
                                  "mediaUrl": {
                                    "type": "string",
                                    "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                                    "example": "https://example.com/image.png"
                                  },
                                  "filename": {
                                    "type": "string",
                                    "description": "Template header document caption",
                                    "example": "Document caption"
                                  },
                                  "latitude": {
                                    "type": "number",
                                    "description": "Template header location latitude",
                                    "example": -23.5505199
                                  },
                                  "longitude": {
                                    "type": "number",
                                    "description": "Template header location longitude",
                                    "example": -46.6333094
                                  }
                                }
                              }
                            ]
                          },
                          "body": {
                            "description": "Template body",
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "placeholders": {
                                    "description": "Template body components",
                                    "example": [
                                      "Body text"
                                    ],
                                    "type": "array",
                                    "items": {
                                      "type": "string"
                                    }
                                  }
                                },
                                "required": [
                                  "placeholders"
                                ]
                              }
                            ]
                          },
                          "buttons": {
                            "description": "Template buttons",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "type": {
                                  "type": "string",
                                  "description": "Template button type",
                                  "enum": [
                                    "URL"
                                  ],
                                  "example": "URL"
                                },
                                "parameter": {
                                  "type": "string",
                                  "description": "Template button text (Required only when the URL is dynamic)",
                                  "example": "Button text"
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          },
                          "cards": {
                            "description": "Template carousel cards",
                            "type": "array",
                            "items": {
                              "type": "object",
                              "properties": {
                                "cardIndex": {
                                  "type": "number",
                                  "description": "Index of the card - 0 Represents the first card",
                                  "example": "0"
                                },
                                "components": {
                                  "type": "object",
                                  "description": "Carousel cards components",
                                  "properties": {
                                    "header": {
                                      "description": "Carousel card header",
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Carousel card header type",
                                          "enum": [
                                            "IMAGE",
                                            "VIDEO"
                                          ],
                                          "example": "IMAGE"
                                        },
                                        "mediaUrl": {
                                          "type": "string",
                                          "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                          "example": "https://example.com/image.png"
                                        }
                                      }
                                    },
                                    "body": {
                                      "description": "Carousel card body",
                                      "allOf": [
                                        {
                                          "type": "object",
                                          "properties": {
                                            "placeholders": {
                                              "description": "Template body components",
                                              "example": [
                                                "Body text"
                                              ],
                                              "type": "array",
                                              "items": {
                                                "type": "string"
                                              }
                                            }
                                          },
                                          "required": [
                                            "placeholders"
                                          ]
                                        }
                                      ]
                                    },
                                    "buttons": {
                                      "description": "Carousel card buttons",
                                      "type": "array",
                                      "items": {
                                        "type": "object",
                                        "properties": {
                                          "type": {
                                            "type": "string",
                                            "description": "Template button type",
                                            "enum": [
                                              "URL"
                                            ],
                                            "example": "URL"
                                          },
                                          "parameter": {
                                            "type": "string",
                                            "description": "Template button text (Required only when the URL is dynamic)",
                                            "example": "Button text"
                                          }
                                        },
                                        "required": [
                                          "type"
                                        ]
                                      }
                                    }
                                  }
                                }
                              },
                              "required": [
                                "type"
                              ]
                            }
                          }
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "templateName",
                  "language"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "SendWhatsappTemplateMessagesDto": {
        "type": "object",
        "properties": {
          "messages": {
            "description": "Array of template messages to be sent",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "from": {
                  "type": "string",
                  "description": "The phone number from which the message is sent, with the country code",
                  "example": "+919999999999",
                  "minLength": 10,
                  "maxLength": 15,
                  "format": "phone"
                },
                "to": {
                  "type": "string",
                  "description": "The phone number to which the message is sent, with the country code",
                  "example": "+919999999999",
                  "minLength": 10,
                  "maxLength": 15,
                  "format": "phone"
                },
                "messageId": {
                  "type": "string",
                  "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
                  "example": "uuid-v4",
                  "minLength": 36,
                  "maxLength": 36
                },
                "content": {
                  "description": "Template message to be sent",
                  "example": {
                    "templateName": "text_template",
                    "language": "en",
                    "templateData": {
                      "header": {
                        "type": "TEXT",
                        "placeholder": "Saurav"
                      },
                      "body": {
                        "placeholders": [
                          "Saurav",
                          "https://saurav.catalog.to"
                        ]
                      }
                    }
                  },
                  "allOf": [
                    {
                      "type": "object",
                      "properties": {
                        "templateName": {
                          "type": "string",
                          "description": "Template name",
                          "example": "template_name"
                        },
                        "language": {
                          "type": "string",
                          "description": "Template language",
                          "example": "en",
                          "default": "en",
                          "enum": [
                            "en",
                            "en_US",
                            "en_GB",
                            "pt_BR",
                            "es",
                            "id"
                          ]
                        },
                        "templateData": {
                          "description": "Template data",
                          "allOf": [
                            {
                              "type": "object",
                              "properties": {
                                "header": {
                                  "description": "Template header",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "type": {
                                          "type": "string",
                                          "description": "Template header type",
                                          "enum": [
                                            "TEXT",
                                            "IMAGE",
                                            "DOCUMENT",
                                            "VIDEO",
                                            "LOCATION"
                                          ],
                                          "example": "TEXT"
                                        },
                                        "placeholder": {
                                          "type": "string",
                                          "description": "Template header text",
                                          "example": "Header text"
                                        },
                                        "mediaUrl": {
                                          "type": "string",
                                          "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                                          "example": "https://example.com/image.png"
                                        },
                                        "filename": {
                                          "type": "string",
                                          "description": "Template header document caption",
                                          "example": "Document caption"
                                        },
                                        "latitude": {
                                          "type": "number",
                                          "description": "Template header location latitude",
                                          "example": -23.5505199
                                        },
                                        "longitude": {
                                          "type": "number",
                                          "description": "Template header location longitude",
                                          "example": -46.6333094
                                        }
                                      }
                                    }
                                  ]
                                },
                                "body": {
                                  "description": "Template body",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "placeholders": {
                                          "description": "Template body components",
                                          "example": [
                                            "Body text"
                                          ],
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "required": [
                                        "placeholders"
                                      ]
                                    }
                                  ]
                                },
                                "buttons": {
                                  "description": "Template buttons",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "Template button type",
                                        "enum": [
                                          "URL"
                                        ],
                                        "example": "URL"
                                      },
                                      "parameter": {
                                        "type": "string",
                                        "description": "Template button text (Required only when the URL is dynamic)",
                                        "example": "Button text"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ]
                                  }
                                },
                                "cards": {
                                  "description": "Template carousel cards",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "cardIndex": {
                                        "type": "number",
                                        "description": "Index of the card - 0 Represents the first card",
                                        "example": "0"
                                      },
                                      "components": {
                                        "type": "object",
                                        "description": "Carousel cards components",
                                        "properties": {
                                          "header": {
                                            "description": "Carousel card header",
                                            "type": "object",
                                            "properties": {
                                              "type": {
                                                "type": "string",
                                                "description": "Carousel card header type",
                                                "enum": [
                                                  "IMAGE",
                                                  "VIDEO"
                                                ],
                                                "example": "IMAGE"
                                              },
                                              "mediaUrl": {
                                                "type": "string",
                                                "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                                "example": "https://example.com/image.png"
                                              }
                                            }
                                          },
                                          "body": {
                                            "description": "Carousel card body",
                                            "allOf": [
                                              {
                                                "type": "object",
                                                "properties": {
                                                  "placeholders": {
                                                    "description": "Template body components",
                                                    "example": [
                                                      "Body text"
                                                    ],
                                                    "type": "array",
                                                    "items": {
                                                      "type": "string"
                                                    }
                                                  }
                                                },
                                                "required": [
                                                  "placeholders"
                                                ]
                                              }
                                            ]
                                          },
                                          "buttons": {
                                            "description": "Carousel card buttons",
                                            "type": "array",
                                            "items": {
                                              "type": "object",
                                              "properties": {
                                                "type": {
                                                  "type": "string",
                                                  "description": "Template button type",
                                                  "enum": [
                                                    "URL"
                                                  ],
                                                  "example": "URL"
                                                },
                                                "parameter": {
                                                  "type": "string",
                                                  "description": "Template button text (Required only when the URL is dynamic)",
                                                  "example": "Button text"
                                                }
                                              },
                                              "required": [
                                                "type"
                                              ]
                                            }
                                          }
                                        }
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ]
                                  }
                                }
                              }
                            }
                          ]
                        }
                      },
                      "required": [
                        "templateName",
                        "language"
                      ]
                    }
                  ]
                }
              },
              "required": [
                "to",
                "content"
              ]
            }
          }
        },
        "required": [
          "messages"
        ]
      },
      "SendLocationMessageContentDto": {
        "type": "object",
        "properties": {
          "latitude": {
            "type": "number",
            "description": "The latitude of the location",
            "example": 19.082502
          },
          "longitude": {
            "type": "number",
            "description": "The longitude of the location",
            "example": 72.7163737
          },
          "name": {
            "type": "string",
            "description": "The name of the location",
            "example": "Mumbai"
          },
          "address": {
            "type": "string",
            "description": "The address of the location",
            "example": "Mumbai, Maharashtra, India"
          }
        },
        "required": [
          "latitude",
          "longitude"
        ]
      },
      "SendWhatsappLocationMessageDto": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "to": {
            "type": "string",
            "description": "The phone number to which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "messageId": {
            "type": "string",
            "description": "Message ID (UUID v4) to be used for the message. If not provided, a random UUID v4 will be generated",
            "example": "uuid-v4",
            "minLength": 36,
            "maxLength": 36
          },
          "content": {
            "description": "Location message to be sent",
            "example": {
              "latitude": 19.082502,
              "longitude": 72.7163737,
              "name": "Mumbai",
              "address": "Mumbai, Maharashtra, India"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "latitude": {
                    "type": "number",
                    "description": "The latitude of the location",
                    "example": 19.082502
                  },
                  "longitude": {
                    "type": "number",
                    "description": "The longitude of the location",
                    "example": 72.7163737
                  },
                  "name": {
                    "type": "string",
                    "description": "The name of the location",
                    "example": "Mumbai"
                  },
                  "address": {
                    "type": "string",
                    "description": "The address of the location",
                    "example": "Mumbai, Maharashtra, India"
                  }
                },
                "required": [
                  "latitude",
                  "longitude"
                ]
              }
            ]
          }
        },
        "required": [
          "to",
          "content"
        ]
      },
      "GetPaginatedGroupsBodyDto": {
        "type": "object",
        "properties": {
          "searchQuery": {
            "type": "string",
            "description": "Search query",
            "example": "group name"
          },
          "orderBy": {
            "type": "string",
            "description": "Order by",
            "example": "NAME",
            "enum": [
              "NAME",
              "DATE_CREATED"
            ]
          },
          "format": {
            "type": "string",
            "description": "Order format",
            "example": "ASCENDING",
            "enum": [
              "ASCENDING",
              "DESCENDING",
              "ascending",
              "descending"
            ]
          },
          "paginationParams": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "afterGroupId": {
                    "type": "string",
                    "description": "Group ID after which the groups are to be fetched",
                    "example": "group_id"
                  },
                  "afterGroupName": {
                    "type": "string",
                    "description": "Group name after which the groups are to be fetched",
                    "example": "group_name"
                  },
                  "afterDateCreated": {
                    "type": "string",
                    "description": "Group date created after which the groups are to be fetched",
                    "example": "2020-01-01T00:00:00.000Z"
                  }
                }
              }
            ]
          }
        }
      },
      "GetGroupsPaginationParams": {
        "type": "object",
        "properties": {
          "afterGroupId": {
            "type": "string",
            "description": "Group ID after which the groups are to be fetched",
            "example": "group_id"
          },
          "afterGroupName": {
            "type": "string",
            "description": "Group name after which the groups are to be fetched",
            "example": "group_name"
          },
          "afterDateCreated": {
            "type": "string",
            "description": "Group date created after which the groups are to be fetched",
            "example": "2020-01-01T00:00:00.000Z"
          }
        }
      },
      "GetPaginatedGroupsResponseDto": {
        "type": "object",
        "properties": {
          "groups": {
            "description": "Array of groups",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "groupId": {
                  "type": "string",
                  "description": "Group ID",
                  "example": "group_id"
                },
                "groupChatId": {
                  "type": "string",
                  "description": "Group Chat ID",
                  "example": "group_chat_id"
                },
                "groupChatName": {
                  "type": "string",
                  "description": "Group chat name",
                  "example": "group_name"
                },
                "memberCount": {
                  "type": "string",
                  "description": "Total members in the group",
                  "example": 10
                },
                "canManageGroupAccess": {
                  "type": "boolean",
                  "description": "Boolean to check if the user can manage group access",
                  "example": true
                },
                "groupAccessLevel": {
                  "type": "string",
                  "description": "The level of access the user has to the group",
                  "example": "NO_ACCESS",
                  "enum": [
                    "FULL_ACCESS",
                    "SEND_ONLY_ACCESS",
                    "NO_ACCESS"
                  ]
                }
              }
            }
          },
          "paginationParams": {
            "description": "Pagination parameters",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "afterGroupId": {
                    "type": "string",
                    "description": "Group ID after which the groups are to be fetched",
                    "example": "group_id"
                  },
                  "afterGroupName": {
                    "type": "string",
                    "description": "Group name after which the groups are to be fetched",
                    "example": "group_name"
                  },
                  "afterDateCreated": {
                    "type": "string",
                    "description": "Group date created after which the groups are to be fetched",
                    "example": "2020-01-01T00:00:00.000Z"
                  }
                }
              }
            ]
          }
        }
      },
      "GetGroupResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "Group ID",
            "example": "group_id"
          },
          "groupChatId": {
            "type": "string",
            "description": "Group Chat ID",
            "example": "group_chat_id"
          },
          "groupChatName": {
            "type": "string",
            "description": "Group chat name",
            "example": "group_name"
          },
          "memberCount": {
            "type": "string",
            "description": "Total members in the group",
            "example": 10
          },
          "canManageGroupAccess": {
            "type": "boolean",
            "description": "Boolean to check if the user can manage group access",
            "example": true
          },
          "groupAccessLevel": {
            "type": "string",
            "description": "The level of access the user has to the group",
            "example": "NO_ACCESS",
            "enum": [
              "FULL_ACCESS",
              "SEND_ONLY_ACCESS",
              "NO_ACCESS"
            ]
          }
        }
      },
      "AssignTeamMemberChatDto": {
        "type": "object",
        "properties": {
          "customerPhoneNumber": {
            "description": "Phone number of customer",
            "type": "string",
            "example": "917838849957",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "assignedUserPhoneNumber": {
            "description": "Phone number of customer",
            "type": "string",
            "example": "917838849957",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "reassign": {
            "description": "Boolean to assign user even if chat is already assigned",
            "type": "boolean",
            "example": "true",
            "format": "boolean"
          },
          "wabaNumber": {
            "type": "string",
            "description": "Integration Waba Number with country code",
            "example": "919876543210",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "customerPhoneNumber",
          "assignedUserPhoneNumber"
        ]
      },
      "UnassignTeamMemberChatDto": {
        "type": "object",
        "properties": {
          "customerPhoneNumber": {
            "description": "Phone number of customer",
            "type": "string",
            "example": "919999999999",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "customerPhoneNumber"
        ]
      },
      "LogoutTeamMemberDto": {
        "type": "object",
        "properties": {
          "userPhoneNumber": {
            "description": "Phone number of the User",
            "type": "string",
            "example": "919999999999",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "userPhoneNumber"
        ]
      },
      "CheckRevertedOnTimeDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "description": "Phone number of customer",
            "type": "string",
            "example": "+919999999999",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "waitingForResponseInSec": {
            "description": "Wait time for response in seconds.",
            "type": "number",
            "example": 60
          },
          "defaultAgentName": {
            "description": "Default name for the agent",
            "type": "string",
            "example": "abc"
          },
          "defaultAgentNumber": {
            "description": "Default number of the agent",
            "type": "string",
            "example": "+919999999999",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "wabaNumber": {
            "description": "Waba Number",
            "type": "string",
            "example": "+919999999999",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          }
        }
      },
      "AddMembersToBroadcastListDto": {
        "type": "object",
        "properties": {
          "phoneNumber": {
            "description": "Phone Number of Customer",
            "type": "string",
            "example": "917838849957",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "channelId": {
            "description": "id of respective channel",
            "type": "string",
            "example": "group_Mpi46ufnpq"
          }
        },
        "required": [
          "phoneNumber",
          "channelId"
        ]
      },
      "getGroupResponse": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "example": "group_LrTo1jJLY7"
          },
          "groupChatName": {
            "type": "string",
            "example": "1 lakh group"
          },
          "memberCount": {
            "type": "number",
            "example": "100000"
          }
        }
      },
      "customerDetailsResponse": {
        "type": "object",
        "properties": {
          "customer": {
            "type": "object",
            "properties": {
              "id": {
                "type": "string",
                "example": "customer_abcde12345"
              },
              "name": {
                "type": "string",
                "example": "customername1"
              },
              "phone": {
                "type": "string",
                "example": "+919999999999"
              },
              "customFields": {
                "type": "array",
                "items": {
                  "type": "object",
                  "properties": {
                    "id": {
                      "type": "string",
                      "example": ""
                    },
                    "name": {
                      "type": "string"
                    },
                    "value": {
                      "type": "string"
                    },
                    "type ": {
                      "type": "string"
                    }
                  }
                }
              },
              "assignedToUser": {
                "type": "string"
              },
              "assignedUserNumber": {
                "type": "string"
              }
            }
          }
        },
        "required": [
          "phone"
        ]
      },
      "CustomFieldDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "custom field name",
            "example": "field name"
          },
          "value": {
            "type": "string",
            "description": "custom field value",
            "example": "value"
          }
        },
        "required": [
          "name",
          "value"
        ]
      },
      "AssignCustomFieldsChatTagsToCustomerDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "Customer Phone Number with country code. Example, 919876543210",
            "example": "919876543210"
          },
          "tags": {
            "description": "Array of tags to be assigned",
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "description": "Array of custom fields to be assigned",
            "example": [
              {
                "name": "field name",
                "value": "value"
              }
            ],
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "custom field name",
                  "example": "field name"
                },
                "value": {
                  "type": "string",
                  "description": "custom field value",
                  "example": "value"
                }
              },
              "required": [
                "name",
                "value"
              ]
            }
          },
          "name": {
            "type": "string",
            "description": "Customer Name",
            "example": "John Doe"
          },
          "optIn": {
            "type": "boolean",
            "description": "Opt in status of the customer",
            "example": true
          },
          "agentPhone": {
            "type": "string",
            "description": "Agent Phone Number with country code (null if unassigned)",
            "example": "919876543210"
          },
          "wabaNumber": {
            "type": "string",
            "description": "Integration Waba Number with country code",
            "example": "919876543210"
          }
        },
        "required": [
          "phone"
        ]
      },
      "BlockCustomerDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number of customer which block operation will be performed",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "phone"
        ]
      },
      "UnblockCustomerDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "The phone number of customer which unblock operation will be performed",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "phone"
        ]
      },
      "TagsResponseErrorDto": {
        "type": "object",
        "properties": {
          "tag": {
            "type": "string",
            "description": "tag name"
          },
          "error": {
            "type": "string",
            "description": "error message"
          }
        },
        "required": [
          "tag",
          "error"
        ]
      },
      "TagsResponseDto": {
        "type": "object",
        "properties": {
          "added": {
            "description": "Array of tags added",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errored": {
            "description": "Array of tags errored",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "tag": {
                  "type": "string",
                  "description": "tag name"
                },
                "error": {
                  "type": "string",
                  "description": "error message"
                }
              },
              "required": [
                "tag",
                "error"
              ]
            }
          }
        },
        "required": [
          "added",
          "errored"
        ]
      },
      "CustomFieldsResponseErrorDto": {
        "type": "object",
        "properties": {
          "customField": {
            "type": "string",
            "description": "custom field name"
          },
          "error": {
            "type": "string",
            "description": "error message"
          }
        },
        "required": [
          "customField",
          "error"
        ]
      },
      "CustomFieldsResponseDto": {
        "type": "object",
        "properties": {
          "added": {
            "description": "Array of custom fields added",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "errored": {
            "description": "Array of custom fields errored",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "customField": {
                  "type": "string",
                  "description": "custom field name"
                },
                "error": {
                  "type": "string",
                  "description": "error message"
                }
              },
              "required": [
                "customField",
                "error"
              ]
            }
          }
        },
        "required": [
          "added",
          "errored"
        ]
      },
      "AssignCustomFieldsChatTagsToCustomerResponseDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "tags response",
            "example": {
              "added": [
                "tag name"
              ],
              "errored": [
                {
                  "tag": "tag name 2",
                  "error": "error message"
                }
              ]
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "added": {
                    "description": "Array of tags added",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "errored": {
                    "description": "Array of tags errored",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "description": "tag name"
                        },
                        "error": {
                          "type": "string",
                          "description": "error message"
                        }
                      },
                      "required": [
                        "tag",
                        "error"
                      ]
                    }
                  }
                },
                "required": [
                  "added",
                  "errored"
                ]
              }
            ]
          },
          "customFields": {
            "description": "custom fields response",
            "example": {
              "added": [
                "custom field name"
              ],
              "errored": [
                {
                  "customField": "custom field name 2",
                  "error": "error message"
                }
              ]
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "added": {
                    "description": "Array of custom fields added",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "errored": {
                    "description": "Array of custom fields errored",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customField": {
                          "type": "string",
                          "description": "custom field name"
                        },
                        "error": {
                          "type": "string",
                          "description": "error message"
                        }
                      },
                      "required": [
                        "customField",
                        "error"
                      ]
                    }
                  }
                },
                "required": [
                  "added",
                  "errored"
                ]
              }
            ]
          },
          "customerId": {
            "type": "string",
            "description": "Customer ID",
            "example": "customer_n9mfidizLv"
          }
        },
        "required": [
          "tags",
          "customFields"
        ]
      },
      "RemoveTagsAndCustomFieldsFromCustomerDto": {
        "type": "object",
        "properties": {
          "phone": {
            "type": "string",
            "description": "customer phone number"
          },
          "tags": {
            "description": "Array of tags to be removed",
            "example": [
              "tag1",
              "tag2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "customFields": {
            "description": "Array of customFields to be removed",
            "example": [
              "custom field 1",
              "custom field 2"
            ],
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "wabaNumber": {
            "type": "string",
            "description": "Integration Waba Number with country code",
            "example": "919876543210"
          }
        },
        "required": [
          "phone",
          "tags",
          "customFields"
        ]
      },
      "RemoveTagsAndCustomFieldsFromCustomerResponseDto": {
        "type": "object",
        "properties": {
          "tags": {
            "description": "tags response",
            "example": {
              "removed": [
                "tag name"
              ],
              "errored": [
                {
                  "tag": "tag name 2",
                  "error": "error message"
                }
              ]
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "added": {
                    "description": "Array of tags added",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "errored": {
                    "description": "Array of tags errored",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "tag": {
                          "type": "string",
                          "description": "tag name"
                        },
                        "error": {
                          "type": "string",
                          "description": "error message"
                        }
                      },
                      "required": [
                        "tag",
                        "error"
                      ]
                    }
                  }
                },
                "required": [
                  "added",
                  "errored"
                ]
              }
            ]
          },
          "customFields": {
            "description": "custom fields response",
            "example": {
              "removed": [
                "custom field name"
              ],
              "errored": [
                {
                  "customField": "custom field name 2",
                  "error": "error message"
                }
              ]
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "added": {
                    "description": "Array of custom fields added",
                    "type": "array",
                    "items": {
                      "type": "string"
                    }
                  },
                  "errored": {
                    "description": "Array of custom fields errored",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "customField": {
                          "type": "string",
                          "description": "custom field name"
                        },
                        "error": {
                          "type": "string",
                          "description": "error message"
                        }
                      },
                      "required": [
                        "customField",
                        "error"
                      ]
                    }
                  }
                },
                "required": [
                  "added",
                  "errored"
                ]
              }
            ]
          }
        },
        "required": [
          "tags",
          "customFields"
        ]
      },
      "CustomerBlockUnblockResponseDto": {
        "type": "object",
        "properties": {}
      },
      "CreateGroupDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the group",
            "example": "Test Group"
          },
          "members": {
            "type": "array",
            "description": "List of members in the group",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "example": "Name"
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number of the member",
                  "example": "919999999999"
                }
              },
              "required": [
                "phone"
              ]
            }
          }
        },
        "required": [
          "name"
        ],
        "additionalProperties": false
      },
      "GroupMemberDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The name of the member",
            "example": "Name"
          },
          "phone": {
            "type": "string",
            "description": "The phone number of the member",
            "example": "919999999999"
          }
        },
        "required": [
          "phone"
        ]
      },
      "AddGroupMembersRequestDto": {
        "type": "object",
        "properties": {
          "groupId": {
            "type": "string",
            "description": "The ID of the group to add members to",
            "example": "group_usPBFQXZtY"
          },
          "members": {
            "type": "array",
            "description": "List of members to add",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "example": "Name"
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number of the member",
                  "example": "919999999999"
                }
              },
              "required": [
                "phone"
              ]
            }
          }
        },
        "required": [
          "groupId",
          "members"
        ]
      },
      "CreateGroupResponseDto": {
        "type": "object",
        "properties": {
          "groupData": {
            "type": "object",
            "properties": {
              "groupId": {
                "type": "string",
                "description": "The ID of the newly created group",
                "example": "group_CG0wH3AIQw"
              },
              "memberCount": {
                "type": "integer",
                "description": "The number of members in the group",
                "example": 1
              },
              "groupChatName": {
                "type": "string",
                "description": "The name of the created group",
                "example": "Test Group"
              }
            },
            "required": [
              "groupId",
              "memberCount",
              "groupChatName"
            ]
          },
          "invalidMembers": {
            "type": "array",
            "description": "List of invalid members (if any)",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "example": "Name"
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number of the member",
                  "example": "919999999999"
                }
              },
              "required": [
                "phone"
              ]
            }
          }
        },
        "required": [
          "groupData",
          "invalidMembers"
        ]
      },
      "AddGroupMembersResponse": {
        "type": "object",
        "properties": {
          "invalidMembers": {
            "type": "array",
            "description": "List of members that could not be added",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "The name of the member",
                  "example": "Name"
                },
                "phone": {
                  "type": "string",
                  "description": "The phone number of the member",
                  "example": "919999999999"
                }
              },
              "required": [
                "phone"
              ]
            }
          },
          "createdMembers": {
            "type": "array",
            "description": "List of members that were successfully added",
            "items": {
              "type": "string",
              "example": [
                "919999999999",
                "919999999998"
              ]
            }
          },
          "membersAlreadyPresent": {
            "type": "array",
            "description": "List of phone numbers of members that were already in the group",
            "items": {
              "type": "string",
              "example": [
                "919999999999",
                "919999999998"
              ]
            }
          },
          "groupId": {
            "type": "string",
            "description": "The ID of the group that members were added to",
            "example": "group_inpkqRL8G2"
          }
        },
        "required": [
          "invalidMembers",
          "createdMembers",
          "membersAlreadyPresent",
          "groupId"
        ]
      },
      "SendWhatsAppBroadcastRequestDto": {
        "type": "object",
        "properties": {
          "groupName": {
            "type": "string",
            "description": "The name of the WhatsApp group to send the message to",
            "example": "Test Group"
          },
          "from": {
            "type": "string",
            "description": "The phone number from which the message is sent, with the country code",
            "example": "+919999999999",
            "minLength": 10,
            "maxLength": 15,
            "format": "phone"
          },
          "content": {
            "type": "object",
            "properties": {
              "templateName": {
                "type": "string",
                "description": "Template name",
                "example": "template_name"
              },
              "language": {
                "type": "string",
                "description": "Template language",
                "example": "en",
                "default": "en",
                "enum": [
                  "en",
                  "en_US",
                  "en_GB",
                  "pt_BR",
                  "es",
                  "id"
                ]
              },
              "templateData": {
                "description": "Template data",
                "allOf": [
                  {
                    "type": "object",
                    "properties": {
                      "header": {
                        "description": "Template header",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "type": {
                                "type": "string",
                                "description": "Template header type",
                                "enum": [
                                  "TEXT",
                                  "IMAGE",
                                  "DOCUMENT",
                                  "VIDEO",
                                  "LOCATION"
                                ],
                                "example": "TEXT"
                              },
                              "placeholder": {
                                "type": "string",
                                "description": "Template header text",
                                "example": "Header text"
                              },
                              "mediaUrl": {
                                "type": "string",
                                "description": "Template header media link (only for IMAGE, VIDEO or DOCUMENT type)",
                                "example": "https://example.com/image.png"
                              },
                              "filename": {
                                "type": "string",
                                "description": "Template header document caption",
                                "example": "Document caption"
                              },
                              "latitude": {
                                "type": "number",
                                "description": "Template header location latitude",
                                "example": -23.5505199
                              },
                              "longitude": {
                                "type": "number",
                                "description": "Template header location longitude",
                                "example": -46.6333094
                              }
                            }
                          }
                        ]
                      },
                      "body": {
                        "description": "Template body",
                        "allOf": [
                          {
                            "type": "object",
                            "properties": {
                              "placeholders": {
                                "description": "Template body components",
                                "example": [
                                  "Body text"
                                ],
                                "type": "array",
                                "items": {
                                  "type": "string"
                                }
                              }
                            },
                            "required": [
                              "placeholders"
                            ]
                          }
                        ]
                      },
                      "buttons": {
                        "description": "Template buttons",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "type": {
                              "type": "string",
                              "description": "Template button type",
                              "enum": [
                                "URL"
                              ],
                              "example": "URL"
                            },
                            "parameter": {
                              "type": "string",
                              "description": "Template button text (Required only when the URL is dynamic)",
                              "example": "Button text"
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      },
                      "cards": {
                        "description": "Template carousel cards",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "cardIndex": {
                              "type": "number",
                              "description": "Index of the card - 0 Represents the first card",
                              "example": "0"
                            },
                            "components": {
                              "type": "object",
                              "description": "Carousel cards components",
                              "properties": {
                                "header": {
                                  "description": "Carousel card header",
                                  "type": "object",
                                  "properties": {
                                    "type": {
                                      "type": "string",
                                      "description": "Carousel card header type",
                                      "enum": [
                                        "IMAGE",
                                        "VIDEO"
                                      ],
                                      "example": "IMAGE"
                                    },
                                    "mediaUrl": {
                                      "type": "string",
                                      "description": "Carousel card header media link (only for IMAGE, VIDEO type)",
                                      "example": "https://example.com/image.png"
                                    }
                                  }
                                },
                                "body": {
                                  "description": "Carousel card body",
                                  "allOf": [
                                    {
                                      "type": "object",
                                      "properties": {
                                        "placeholders": {
                                          "description": "Template body components",
                                          "example": [
                                            "Body text"
                                          ],
                                          "type": "array",
                                          "items": {
                                            "type": "string"
                                          }
                                        }
                                      },
                                      "required": [
                                        "placeholders"
                                      ]
                                    }
                                  ]
                                },
                                "buttons": {
                                  "description": "Carousel card buttons",
                                  "type": "array",
                                  "items": {
                                    "type": "object",
                                    "properties": {
                                      "type": {
                                        "type": "string",
                                        "description": "Template button type",
                                        "enum": [
                                          "URL"
                                        ],
                                        "example": "URL"
                                      },
                                      "parameter": {
                                        "type": "string",
                                        "description": "Template button text (Required only when the URL is dynamic)",
                                        "example": "Button text"
                                      }
                                    },
                                    "required": [
                                      "type"
                                    ]
                                  }
                                }
                              }
                            }
                          },
                          "required": [
                            "type"
                          ]
                        }
                      }
                    }
                  }
                ]
              }
            },
            "required": [
              "templateName",
              "language"
            ]
          }
        },
        "required": [
          "groupName"
        ]
      },
      "SendWhatsAppBroadcastResponseDto": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string",
            "description": "The status of the sent message (SENT or FAILED)",
            "example": "SENT",
            "enum": [
              "SENT",
              "FAILED"
            ]
          },
          "messageId": {
            "type": "string",
            "description": "The ID of the sent message",
            "example": "e7de18e6-9e96-4a7b-b570-93eaa0518584"
          },
          "errorMessage": {
            "type": "string",
            "description": "The error message in case of a failed message",
            "example": "Sample Error"
          }
        },
        "required": [
          "status",
          "messageId"
        ]
      },
      "DeleteGroupRequestDto": {
        "type": "object",
        "properties": {
          "groupIds": {
            "type": "array",
            "description": "The IDs of the group to delete",
            "items": {
              "type": "string",
              "example": [
                "group_usPBFQXZtY",
                "group_CG0wH3AIQw"
              ]
            },
            "minItems": 1,
            "uniqueItems": true,
            "example": [
              "group_usPBFQXZtY",
              "group_CG0wH3AIQw"
            ]
          }
        },
        "required": [
          "groupIds"
        ]
      },
      "CreateTemplateHeaderComponentExample": {
        "type": "object",
        "properties": {
          "link": {
            "type": "string",
            "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
          }
        }
      },
      "CreateTemplateHeaderComponent": {
        "type": "object",
        "properties": {
          "format": {
            "type": "string",
            "description": "Header Format",
            "enum": [
              "TEXT",
              "IMAGE",
              "VIDEO",
              "DOCUMENT"
            ]
          },
          "text": {
            "type": "string",
            "description": "Header Text (Present only if format is TEXT)",
            "maxLength": 60
          },
          "example": {
            "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
            "additionalProperties": {
              "type": "string"
            },
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "link": {
                    "type": "string",
                    "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                  }
                }
              }
            ]
          }
        },
        "required": [
          "format"
        ]
      },
      "CreateTemplateBodyComponent": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Body Text",
            "maxLength": 1024
          },
          "example": {
            "type": "object",
            "description": "Body Variable Example (Present only if text contains variable)",
            "additionalProperties": {
              "type": "string"
            }
          }
        },
        "required": [
          "text"
        ]
      },
      "CreateTemplateFooterComponent": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "Footer Text",
            "maxLength": 60
          }
        },
        "required": [
          "text"
        ]
      },
      "CreateTemplateButtonDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Button Type",
            "enum": [
              "QUICK_REPLY",
              "URL",
              "PHONE_NUMBER"
            ]
          },
          "text": {
            "type": "string",
            "description": "Button Text",
            "maxLength": 25,
            "minLength": 1
          },
          "url": {
            "type": "string",
            "description": "Button Url (Present only if type is URL)"
          },
          "example": {
            "type": "string",
            "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
          }
        },
        "required": [
          "type",
          "text"
        ]
      },
      "CreateTemplateComponentDto": {
        "type": "object",
        "properties": {
          "header": {
            "description": "Header Component",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "format": {
                    "type": "string",
                    "description": "Header Format",
                    "enum": [
                      "TEXT",
                      "IMAGE",
                      "VIDEO",
                      "DOCUMENT"
                    ]
                  },
                  "text": {
                    "type": "string",
                    "description": "Header Text (Present only if format is TEXT)",
                    "maxLength": 60
                  },
                  "example": {
                    "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                    "additionalProperties": {
                      "type": "string"
                    },
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "link": {
                            "type": "string",
                            "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                          }
                        }
                      }
                    ]
                  }
                },
                "required": [
                  "format"
                ]
              }
            ]
          },
          "body": {
            "description": "Body Component",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Body Text",
                    "maxLength": 1024
                  },
                  "example": {
                    "type": "object",
                    "description": "Body Variable Example (Present only if text contains variable)",
                    "additionalProperties": {
                      "type": "string"
                    }
                  }
                },
                "required": [
                  "text"
                ]
              }
            ]
          },
          "footer": {
            "description": "Footer Component",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "text": {
                    "type": "string",
                    "description": "Footer Text",
                    "maxLength": 60
                  }
                },
                "required": [
                  "text"
                ]
              }
            ]
          },
          "buttons": {
            "description": "Buttons Component",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Button Type",
                  "enum": [
                    "QUICK_REPLY",
                    "URL",
                    "PHONE_NUMBER"
                  ]
                },
                "text": {
                  "type": "string",
                  "description": "Button Text",
                  "maxLength": 25,
                  "minLength": 1
                },
                "url": {
                  "type": "string",
                  "description": "Button Url (Present only if type is URL)"
                },
                "example": {
                  "type": "string",
                  "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                }
              },
              "required": [
                "type",
                "text"
              ]
            }
          }
        },
        "required": [
          "body"
        ]
      },
      "CreateTemplateRequestDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template Name",
            "minLength": 1,
            "maxLength": 512
          },
          "language": {
            "type": "string",
            "enum": [
              "af",
              "sq",
              "ar",
              "az",
              "bn",
              "bg",
              "ca",
              "zh_CN",
              "zh_HK",
              "zh_TW",
              "hr",
              "cs",
              "da",
              "nl",
              "en",
              "en_GB",
              "en_US",
              "et",
              "fil",
              "fi",
              "fr",
              "ka",
              "de",
              "el",
              "gu",
              "ha",
              "he",
              "hi",
              "hu",
              "id",
              "ga",
              "it",
              "ja",
              "kn",
              "kk",
              "rw_RW",
              "ko",
              "ky_KG",
              "lo",
              "lv",
              "lt",
              "mk",
              "ms",
              "ml",
              "mr",
              "nb",
              "fa",
              "pl",
              "pt_BR",
              "pt_PT",
              "pa",
              "ro",
              "ru",
              "sr",
              "sk",
              "sl",
              "es",
              "es_AR",
              "es_ES",
              "es_MX",
              "sw",
              "sv",
              "ta",
              "te",
              "th",
              "tr",
              "uk",
              "ur",
              "uz"
            ],
            "description": "Template Language",
            "example": "en",
            "default": "en"
          },
          "components": {
            "description": "Template Components",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "Header Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "Header Format",
                            "enum": [
                              "TEXT",
                              "IMAGE",
                              "VIDEO",
                              "DOCUMENT"
                            ]
                          },
                          "text": {
                            "type": "string",
                            "description": "Header Text (Present only if format is TEXT)",
                            "maxLength": 60
                          },
                          "example": {
                            "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "link": {
                                    "type": "string",
                                    "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "format"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "description": "Body Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Body Text",
                            "maxLength": 1024
                          },
                          "example": {
                            "type": "object",
                            "description": "Body Variable Example (Present only if text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "footer": {
                    "description": "Footer Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Footer Text",
                            "maxLength": 60
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "buttons": {
                    "description": "Buttons Component",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Button Type",
                          "enum": [
                            "QUICK_REPLY",
                            "URL",
                            "PHONE_NUMBER"
                          ]
                        },
                        "text": {
                          "type": "string",
                          "description": "Button Text",
                          "maxLength": 25,
                          "minLength": 1
                        },
                        "url": {
                          "type": "string",
                          "description": "Button Url (Present only if type is URL)"
                        },
                        "example": {
                          "type": "string",
                          "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    }
                  }
                },
                "required": [
                  "body"
                ]
              }
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "MARKETING",
              "UTILITY"
            ],
            "description": "Template Category",
            "example": "MARKETING"
          }
        },
        "required": [
          "name",
          "language",
          "components",
          "category"
        ]
      },
      "DeleteTemplateDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template Name",
            "example": "template_name"
          },
          "wabaPhoneNumber": {
            "type": "string",
            "description": "Waba Number",
            "example": "14155238886"
          }
        },
        "required": [
          "name",
          "wabaNumber"
        ]
      },
      "CreateTemplateViaPublicAPIDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template Name",
            "minLength": 1,
            "maxLength": 512
          },
          "language": {
            "type": "string",
            "enum": [
              "af",
              "sq",
              "ar",
              "az",
              "bn",
              "bg",
              "ca",
              "zh_CN",
              "zh_HK",
              "zh_TW",
              "hr",
              "cs",
              "da",
              "nl",
              "en",
              "en_GB",
              "en_US",
              "et",
              "fil",
              "fi",
              "fr",
              "ka",
              "de",
              "el",
              "gu",
              "ha",
              "he",
              "hi",
              "hu",
              "id",
              "ga",
              "it",
              "ja",
              "kn",
              "kk",
              "rw_RW",
              "ko",
              "ky_KG",
              "lo",
              "lv",
              "lt",
              "mk",
              "ms",
              "ml",
              "mr",
              "nb",
              "fa",
              "pl",
              "pt_BR",
              "pt_PT",
              "pa",
              "ro",
              "ru",
              "sr",
              "sk",
              "sl",
              "es",
              "es_AR",
              "es_ES",
              "es_MX",
              "sw",
              "sv",
              "ta",
              "te",
              "th",
              "tr",
              "uk",
              "ur",
              "uz"
            ],
            "description": "Template Language",
            "example": "en"
          },
          "components": {
            "description": "Template Components",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "Header Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "Header Format",
                            "enum": [
                              "TEXT",
                              "IMAGE",
                              "VIDEO",
                              "DOCUMENT"
                            ]
                          },
                          "text": {
                            "type": "string",
                            "description": "Header Text (Present only if format is TEXT)",
                            "maxLength": 60
                          },
                          "example": {
                            "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "link": {
                                    "type": "string",
                                    "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "format"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "description": "Body Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Body Text",
                            "maxLength": 1024
                          },
                          "example": {
                            "type": "object",
                            "description": "Body Variable Example (Present only if text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "footer": {
                    "description": "Footer Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Footer Text",
                            "maxLength": 60
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "buttons": {
                    "description": "Buttons Component",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Button Type",
                          "enum": [
                            "QUICK_REPLY",
                            "URL",
                            "PHONE_NUMBER"
                          ]
                        },
                        "text": {
                          "type": "string",
                          "description": "Button Text",
                          "maxLength": 25,
                          "minLength": 1
                        },
                        "url": {
                          "type": "string",
                          "description": "Button Url (Present only if type is URL)"
                        },
                        "example": {
                          "type": "string",
                          "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    }
                  }
                },
                "required": [
                  "body"
                ]
              }
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "MARKETING",
              "UTILITY"
            ],
            "description": "Template Category",
            "example": "MARKETING"
          },
          "wabaNumbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The phone number from which the message is sent, with the country code",
              "example": "+919999999999",
              "minLength": 10,
              "maxLength": 15,
              "format": "phone"
            }
          },
          "allowCategoryUpdate": {
            "type": "boolean",
            "default": true,
            "description": "Set to true to allow Meta to automatically assign a category. If omitted, the template may be rejected due to miscategorization."
          }
        },
        "required": [
          "name",
          "language",
          "components",
          "category"
        ]
      },
      "EditTemplateViaPublicAPIDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Template Name",
            "minLength": 1,
            "maxLength": 512
          },
          "language": {
            "type": "string",
            "enum": [
              "af",
              "sq",
              "ar",
              "az",
              "bn",
              "bg",
              "ca",
              "zh_CN",
              "zh_HK",
              "zh_TW",
              "hr",
              "cs",
              "da",
              "nl",
              "en",
              "en_GB",
              "en_US",
              "et",
              "fil",
              "fi",
              "fr",
              "ka",
              "de",
              "el",
              "gu",
              "ha",
              "he",
              "hi",
              "hu",
              "id",
              "ga",
              "it",
              "ja",
              "kn",
              "kk",
              "rw_RW",
              "ko",
              "ky_KG",
              "lo",
              "lv",
              "lt",
              "mk",
              "ms",
              "ml",
              "mr",
              "nb",
              "fa",
              "pl",
              "pt_BR",
              "pt_PT",
              "pa",
              "ro",
              "ru",
              "sr",
              "sk",
              "sl",
              "es",
              "es_AR",
              "es_ES",
              "es_MX",
              "sw",
              "sv",
              "ta",
              "te",
              "th",
              "tr",
              "uk",
              "ur",
              "uz"
            ],
            "description": "Template Language",
            "example": "en"
          },
          "components": {
            "description": "Template Components",
            "allOf": [
              {
                "type": "object",
                "properties": {
                  "header": {
                    "description": "Header Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "format": {
                            "type": "string",
                            "description": "Header Format",
                            "enum": [
                              "TEXT",
                              "IMAGE",
                              "VIDEO",
                              "DOCUMENT"
                            ]
                          },
                          "text": {
                            "type": "string",
                            "description": "Header Text (Present only if format is TEXT)",
                            "maxLength": 60
                          },
                          "example": {
                            "description": "Header Example (add link only if format is Media type or add variable and their values if format is TEXT and text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            },
                            "allOf": [
                              {
                                "type": "object",
                                "properties": {
                                  "link": {
                                    "type": "string",
                                    "description": "Header Example Media Url (Present only if format is IMAGE/VIDEO/DOCUMENT)"
                                  }
                                }
                              }
                            ]
                          }
                        },
                        "required": [
                          "format"
                        ]
                      }
                    ]
                  },
                  "body": {
                    "description": "Body Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Body Text",
                            "maxLength": 1024
                          },
                          "example": {
                            "type": "object",
                            "description": "Body Variable Example (Present only if text contains variable)",
                            "additionalProperties": {
                              "type": "string"
                            }
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "footer": {
                    "description": "Footer Component",
                    "allOf": [
                      {
                        "type": "object",
                        "properties": {
                          "text": {
                            "type": "string",
                            "description": "Footer Text",
                            "maxLength": 60
                          }
                        },
                        "required": [
                          "text"
                        ]
                      }
                    ]
                  },
                  "buttons": {
                    "description": "Buttons Component",
                    "type": "array",
                    "items": {
                      "type": "object",
                      "properties": {
                        "type": {
                          "type": "string",
                          "description": "Button Type",
                          "enum": [
                            "QUICK_REPLY",
                            "URL",
                            "PHONE_NUMBER"
                          ]
                        },
                        "text": {
                          "type": "string",
                          "description": "Button Text",
                          "maxLength": 25,
                          "minLength": 1
                        },
                        "url": {
                          "type": "string",
                          "description": "Button Url (Present only if type is URL)"
                        },
                        "example": {
                          "type": "string",
                          "description": "Button Url Example Parameter (Present only if type is URL and url contains variable)"
                        },
                        "phoneNumber": {
                          "type": "string",
                          "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                        }
                      },
                      "required": [
                        "type",
                        "text"
                      ]
                    }
                  }
                },
                "required": [
                  "body"
                ]
              }
            ]
          },
          "category": {
            "type": "string",
            "enum": [
              "MARKETING",
              "UTILITY"
            ],
            "description": "Template Category",
            "example": "MARKETING"
          },
          "wabaNumbers": {
            "type": "array",
            "items": {
              "type": "string",
              "description": "The phone number from which the message is sent, with the country code",
              "example": "+919999999999",
              "minLength": 10,
              "maxLength": 15,
              "format": "phone"
            }
          },
          "allowCategoryUpdate": {
            "type": "boolean",
            "default": true,
            "description": "Set to true to allow Meta to automatically assign a category. If omitted, the template may be rejected due to miscategorization."
          }
        },
        "required": [
          "name",
          "language",
          "components",
          "category"
        ]
      },
      "CreateTemplateViaPublicAPIResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "EditTemplateViaPublicAPIResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "DeleteTemplateViaPublicAPIResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "example": true
          }
        },
        "required": [
          "success"
        ]
      },
      "GetV2TemplatesResponseItem": {
        "type": "object",
        "properties": {
          "id": {
            "type": "number",
            "description": "Template ID"
          },
          "name": {
            "type": "string",
            "description": "Template Name",
            "minLength": 1,
            "maxLength": 512
          },
          "language": {
            "type": "string",
            "enum": [
              "af",
              "sq",
              "ar",
              "az",
              "bn",
              "bg",
              "ca",
              "zh_CN",
              "zh_HK",
              "zh_TW",
              "hr",
              "cs",
              "da",
              "nl",
              "en",
              "en_GB",
              "en_US",
              "et",
              "fil",
              "fi",
              "fr",
              "ka",
              "de",
              "el",
              "gu",
              "ha",
              "he",
              "hi",
              "hu",
              "id",
              "ga",
              "it",
              "ja",
              "kn",
              "kk",
              "rw_RW",
              "ko",
              "ky_KG",
              "lo",
              "lv",
              "lt",
              "mk",
              "ms",
              "ml",
              "mr",
              "nb",
              "fa",
              "pl",
              "pt_BR",
              "pt_PT",
              "pa",
              "ro",
              "ru",
              "sr",
              "sk",
              "sl",
              "es",
              "es_AR",
              "es_ES",
              "es_MX",
              "sw",
              "sv",
              "ta",
              "te",
              "th",
              "tr",
              "uk",
              "ur",
              "uz"
            ],
            "description": "Template Language",
            "example": "en"
          },
          "category": {
            "type": "string",
            "enum": [
              "MARKETING",
              "UTILITY"
            ],
            "description": "Template Category",
            "example": "MARKETING"
          },
          "status": {
            "type": "string",
            "enum": [
              "APPROVED",
              "REJECTED",
              "PENDING",
              "PAUSED"
            ],
            "description": "Template Status",
            "example": "PAUSED"
          },
          "rejectedReason": {
            "type": "string",
            "description": "Template Rejected Reason",
            "example": "Template Rejected Reason"
          },
          "createdBy": {
            "type": "string",
            "description": "Template Created By",
            "example": "Creater_Name"
          },
          "wabaPhoneNumber": {
            "type": "string",
            "description": "Waba Phone Number",
            "example": "14155238886"
          },
          "components": {
            "description": "Template Components",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "enum": [
                    "BODY",
                    "HEADER",
                    "FOOTER",
                    "BUTTON"
                  ],
                  "description": "Component Type",
                  "example": "HEADER"
                },
                "format": {
                  "type": "string",
                  "enum": [
                    "TEXT",
                    "IMAGE",
                    "DOCUMENT",
                    "VIDEO",
                    "LOCATION"
                  ],
                  "description": "Template Component Format (Present when type is HEADER)",
                  "example": "TEXT"
                },
                "text": {
                  "type": "string",
                  "description": "Present WHEN type is BODY/FOOTER or type is HEADER and format is TEXT"
                },
                "variables": {
                  "description": "Present when type is HEADER/BODY",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "name": {
                        "type": "string",
                        "description": "Name of the variable present in the text",
                        "example": "variable_1"
                      },
                      "mediaUrl": {
                        "type": "string",
                        "description": "Present only if type is IMAGE/VIDEO/DOCUMENT",
                        "example": "https://placeholder.com/150"
                      },
                      "fileName": {
                        "type": "string",
                        "description": "The filename of the document (Present only if type is DOCUMENT)",
                        "example": "Example File Name"
                      }
                    }
                  }
                },
                "buttons": {
                  "description": "Present when type is BUTTON",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "type": {
                        "type": "string",
                        "description": "Button Type",
                        "enum": [
                          "QUICK_REPLY",
                          "URL",
                          "PHONE_NUMBER"
                        ],
                        "example": "URL"
                      },
                      "text": {
                        "type": "string",
                        "description": "Button Text",
                        "example": "Button Text"
                      },
                      "url": {
                        "type": "string",
                        "description": "Button Url (Present only if type is URL)"
                      },
                      "phoneNumber": {
                        "type": "string",
                        "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                      },
                      "variables": {
                        "description": "Button Variables (Present when type is URL)",
                        "type": "array",
                        "items": {
                          "type": "object",
                          "properties": {
                            "parameter": {
                              "type": "string",
                              "example": "some-url-path"
                            }
                          },
                          "required": [
                            "parameter"
                          ]
                        }
                      }
                    },
                    "required": [
                      "text",
                      "type"
                    ]
                  }
                }
              },
              "required": [
                "type"
              ],
              "example": [
                {
                  "type": "HEADER",
                  "format": "IMAGE",
                  "variables": [
                    {
                      "mediaUrl": "https://placeholder.com/150"
                    }
                  ]
                },
                {
                  "type": "BODY",
                  "text": "Hi {{name}}, \r\nWelcome to your shop!\r\nWe have got {{offer_name}} for you",
                  "variables": [
                    {
                      "name": "name"
                    },
                    {
                      "name": "offer_name"
                    }
                  ]
                },
                {
                  "type": "FOOTER",
                  "text": "powered by doubletick.io"
                },
                {
                  "type": "BUTTON",
                  "buttons": [
                    {
                      "type": "QUICK_REPLY",
                      "text": "Interested"
                    },
                    {
                      "type": "QUICK_REPLY",
                      "text": "Tell me More"
                    },
                    {
                      "type": "QUICK_REPLY",
                      "text": "Stop"
                    }
                  ]
                }
              ]
            }
          }
        },
        "required": [
          "id",
          "name",
          "language",
          "category",
          "components",
          "status",
          "rejectedReason",
          "createdBy",
          "wabaPhoneNumber"
        ]
      },
      "ComponentsDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "enum": [
              "BODY",
              "HEADER",
              "FOOTER",
              "BUTTON"
            ],
            "description": "Component Type",
            "example": "HEADER"
          },
          "format": {
            "type": "string",
            "enum": [
              "TEXT",
              "IMAGE",
              "DOCUMENT",
              "VIDEO",
              "LOCATION"
            ],
            "description": "Template Component Format (Present when type is HEADER)",
            "example": "TEXT"
          },
          "text": {
            "type": "string",
            "description": "Present WHEN type is BODY/FOOTER or type is HEADER and format is TEXT"
          },
          "variables": {
            "description": "Present when type is HEADER/BODY",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "description": "Name of the variable present in the text",
                  "example": "variable_1"
                },
                "mediaUrl": {
                  "type": "string",
                  "description": "Present only if type is IMAGE/VIDEO/DOCUMENT",
                  "example": "https://placeholder.com/150"
                },
                "fileName": {
                  "type": "string",
                  "description": "The filename of the document (Present only if type is DOCUMENT)",
                  "example": "Example File Name"
                }
              }
            }
          },
          "buttons": {
            "description": "Present when type is BUTTON",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "type": {
                  "type": "string",
                  "description": "Button Type",
                  "enum": [
                    "QUICK_REPLY",
                    "URL",
                    "PHONE_NUMBER"
                  ],
                  "example": "URL"
                },
                "text": {
                  "type": "string",
                  "description": "Button Text",
                  "example": "Button Text"
                },
                "url": {
                  "type": "string",
                  "description": "Button Url (Present only if type is URL)"
                },
                "phoneNumber": {
                  "type": "string",
                  "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
                },
                "variables": {
                  "description": "Button Variables (Present when type is URL)",
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "parameter": {
                        "type": "string",
                        "example": "some-url-path"
                      }
                    },
                    "required": [
                      "parameter"
                    ]
                  }
                }
              },
              "required": [
                "text",
                "type"
              ]
            }
          }
        },
        "required": [
          "type"
        ],
        "example": [
          {
            "type": "HEADER",
            "format": "IMAGE",
            "variables": [
              {
                "mediaUrl": "https://placeholder.com/150"
              }
            ]
          },
          {
            "type": "BODY",
            "text": "Hi {{name}}, \r\nWelcome to your shop!\r\nWe have got {{offer_name}} for you",
            "variables": [
              {
                "name": "name"
              },
              {
                "name": "offer_name"
              }
            ]
          },
          {
            "type": "FOOTER",
            "text": "powered by doubletick.io"
          },
          {
            "type": "BUTTON",
            "buttons": [
              {
                "type": "QUICK_REPLY",
                "text": "Interested"
              },
              {
                "type": "QUICK_REPLY",
                "text": "Tell me More"
              },
              {
                "type": "QUICK_REPLY",
                "text": "Stop"
              }
            ]
          }
        ]
      },
      "ComponentVariableDto": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "Name of the variable present in the text",
            "example": "variable_1"
          },
          "mediaUrl": {
            "type": "string",
            "description": "Present only if type is IMAGE/VIDEO/DOCUMENT",
            "example": "https://placeholder.com/150"
          },
          "fileName": {
            "type": "string",
            "description": "The filename of the document (Present only if type is DOCUMENT)",
            "example": "Example File Name"
          }
        }
      },
      "ButtonVariableDto": {
        "type": "object",
        "properties": {
          "parameter": {
            "type": "string",
            "example": "some-url-path"
          }
        },
        "required": [
          "parameter"
        ]
      },
      "ButtonDto": {
        "type": "object",
        "properties": {
          "type": {
            "type": "string",
            "description": "Button Type",
            "enum": [
              "QUICK_REPLY",
              "URL",
              "PHONE_NUMBER"
            ],
            "example": "URL"
          },
          "text": {
            "type": "string",
            "description": "Button Text",
            "example": "Button Text"
          },
          "url": {
            "type": "string",
            "description": "Button Url (Present only if type is URL)"
          },
          "phoneNumber": {
            "type": "string",
            "description": "Button Phone Number (Present only if type is PHONE_NUMBER)"
          },
          "variables": {
            "description": "Button Variables (Present when type is URL)",
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "parameter": {
                  "type": "string",
                  "example": "some-url-path"
                }
              },
              "required": [
                "parameter"
              ]
            }
          }
        },
        "required": [
          "text",
          "type"
        ]
      },
      "ChangeReportingManagerDto": {
        "type": "object",
        "properties": {
          "reportingManagerPhoneNumber": {
            "type": "string",
            "description": "Phone number of the reporting manager"
          },
          "memberPhoneNumber": {
            "type": "string",
            "description": "Phone number of the member"
          }
        },
        "required": [
          "reportingManagerPhoneNumber",
          "memberPhoneNumber"
        ]
      },
      "ChangeReportingManagerResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the operation was successful"
          }
        },
        "required": [
          "success"
        ]
      },
      "GetTeamResponseDto": {
        "type": "object",
        "properties": {
          "data": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "id": {
                  "type": "string",
                  "description": "ID of the Team member"
                },
                "name": {
                  "type": "string",
                  "description": "Name of the Team member"
                },
                "phone": {
                  "type": "string",
                  "description": "Phone number of the Team member"
                },
                "email": {
                  "type": "string",
                  "description": "Email of the Team member"
                },
                "joinDate": {
                  "type": "string",
                  "format": "date-time",
                  "description": "Date when Team member joined"
                },
                "reportingManager": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "id": {
                        "type": "string",
                        "description": "ID of the Reporting Manager"
                      },
                      "name": {
                        "type": "string",
                        "description": "Name of the Reporting Manager"
                      },
                      "phone": {
                        "type": "string",
                        "description": "Phone number of the Reporting Manager"
                      },
                      "email": {
                        "type": "string",
                        "description": "Email of the Reporting Manager"
                      },
                      "joinDate": {
                        "type": "string",
                        "format": "date-time",
                        "description": "Date when Reporting Manager joined"
                      }
                    }
                  }
                },
                "orgRoleName": {
                  "type": "string",
                  "description": "Name of the Organization Role"
                },
                "orgRoleId": {
                  "type": "string",
                  "description": "ID of the Organization Role"
                },
                "isOrganizationOwner": {
                  "type": "boolean",
                  "description": "Indicates whether the Team member is the owner of the Organization"
                }
              }
            }
          }
        }
      },
      "RemoveTeamMemberDto": {
        "type": "object",
        "properties": {
          "memberPhoneNumber": {
            "type": "string",
            "description": "Phone number of the team member"
          }
        },
        "required": [
          "memberPhoneNumber"
        ]
      },
      "RemoveTeamMemberResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the operation was successful"
          }
        },
        "required": [
          "success"
        ]
      },
      "WabaAccess": {
        "type": "object",
        "properties": {
          "wabaNumber": {
            "type": "string",
            "minLength": 1
          },
          "wabaRoleId": {
            "type": "string",
            "minLength": 1
          }
        }
      },
      "Member": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "minLength": 1
          },
          "phone": {
            "type": "string",
            "minLength": 1
          },
          "orgRoleId": {
            "type": "string",
            "minLength": 1
          },
          "wabaAccess": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "wabaNumber": {
                  "type": "string",
                  "minLength": 1
                },
                "wabaRoleId": {
                  "type": "string",
                  "minLength": 1
                }
              }
            }
          },
          "addToTeamDirectly": {
            "type": "boolean"
          },
          "sendInviteMessage": {
            "type": "boolean"
          }
        }
      },
      "AddMembersUnderReportManagerDto": {
        "type": "object",
        "properties": {
          "reportingManagerPhoneNumber": {
            "type": "string",
            "minLength": 1
          },
          "members": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "name": {
                  "type": "string",
                  "minLength": 1
                },
                "phone": {
                  "type": "string",
                  "minLength": 1
                },
                "orgRoleId": {
                  "type": "string",
                  "minLength": 1
                },
                "wabaAccess": {
                  "type": "array",
                  "items": {
                    "type": "object",
                    "properties": {
                      "wabaNumber": {
                        "type": "string",
                        "minLength": 1
                      },
                      "wabaRoleId": {
                        "type": "string",
                        "minLength": 1
                      }
                    }
                  }
                },
                "addToTeamDirectly": {
                  "type": "boolean"
                },
                "sendInviteMessage": {
                  "type": "boolean"
                }
              }
            }
          }
        }
      },
      "AddMembersUnderReportManagerResponseDto": {
        "type": "object",
        "properties": {
          "success": {
            "type": "boolean",
            "description": "Indicates whether the operation was successful"
          }
        },
        "required": [
          "success"
        ]
      },
      "GetAllRolesResponseDto": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "id": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "description": {
              "type": "string"
            },
            "type": {
              "type": "string",
              "enum": [
                "ORG",
                "WHATSAPP"
              ]
            },
            "permissions": {
              "type": "array",
              "items": {
                "type": "object",
                "properties": {
                  "id": {
                    "type": "string"
                  },
                  "name": {
                    "type": "string"
                  },
                  "description": {
                    "type": "string"
                  }
                }
              }
            },
            "isCustomRole": {
              "type": "boolean"
            },
            "dateCreated": {
              "type": "string",
              "format": "date-time"
            },
            "dateUpdated": {
              "type": "string",
              "format": "date-time"
            }
          },
          "required": [
            "roleId",
            "roleName",
            "description",
            "type",
            "permissions",
            "isCustomRole",
            "dateCreated",
            "dateUpdated"
          ]
        }
      },
      "UploadMediaResponseDto": {
        "type": "object",
        "properties": {
          "mediaUrl": {
            "type": "string",
            "description": "Media URL"
          },
          "expiresIn": {
            "type": "integer",
            "description": "Media URL expiration time in seconds"
          }
        },
        "required": [
          "mediaUrl",
          "expiresIn"
        ]
      },
      "RegisterPublicWebhookDtoV2": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the webhook",
            "example": "https://example.com/webhook"
          },
          "method": {
            "type": "string",
            "description": "HTTP method used for the webhook",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH",
              "HEAD"
            ],
            "example": "POST"
          },
          "headers": {
            "type": "object",
            "description": "Custom headers to be sent with the webhook",
            "additionalProperties": true,
            "example": {
              "Authorization": "Bearer token"
            }
          },
          "body": {
            "type": "object",
            "description": "Payload to be sent with the webhook",
            "additionalProperties": true
          },
          "query": {
            "type": "object",
            "description": "Query parameters to be included in the webhook URL",
            "additionalProperties": true
          },
          "bodyFormat": {
            "type": "string",
            "description": "Format of the body content",
            "enum": [
              "JSON",
              "FORM_DATA"
            ],
            "example": "JSON"
          },
          "authorization": {
            "type": "object",
            "description": "Authorization details for the webhook",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of authorization used for the webhook",
                "enum": [
                  "BASIC",
                  "BEARER"
                ],
                "example": "BEARER"
              },
              "payload": {
                "type": "string",
                "description": "The authorization payload, such as a token or credentials",
                "example": "some-secure-token"
              }
            },
            "required": [
              "type",
              "payload"
            ]
          },
          "webhookEvents": {
            "type": "array",
            "description": "Events that trigger the webhook",
            "items": {
              "type": "string",
              "enum": [
                "MESSAGE_RECEIVED",
                "MESSAGE_STATUS_UPDATE",
                "CHAT_ASSIGNED_TO_AGENT",
                "CHAT_UNASSIGNED",
                "UPDATE_CUSTOMER_CUSTOM_FIELD",
                "WIDGET_LEAD_RECEIVED",
                "VERIFIED_WIDGET_LEAD_RECEIVED",
                "NEW_LEAD",
                "RAW_CLOUD_API_WEBHOOK",
                "CLOSE_CONVERSATION",
                "TEMPLATE_UPDATE",
                "ADD_TAG",
                "REMOVE_TAG",
                "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                "CONVERSATION_OPENED",
                "CUSTOMER_BUSINESS_CHAT_OPEN"
              ]
            },
            "example": [
              "MESSAGE_RECEIVED",
              "CLOSE_CONVERSATION"
            ]
          },
          "retryOnTimeout": {
            "type": "boolean",
            "description": "Retry the webhook call on timeout"
          },
          "name": {
            "type": "string",
            "description": "Name of the webhook"
          },
          "wabaNumbers": {
            "type": "array",
            "description": "List of WABA numbers associated with the webhook",
            "items": {
              "type": "string",
              "example": "+919999999999",
              "minLength": 10,
              "maxLength": 15,
              "format": "phone"
            }
          }
        },
        "required": [
          "url",
          "method",
          "webhookEvents",
          "name",
          "wabaNumbers"
        ]
      },
      "DeregisterWebhooksDtoV2": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "description": "The unique identifier of the webhook to be deregistered"
          }
        },
        "required": [
          "webhookId"
        ]
      },
      "EditPublicWebhookParamDto": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "description": "The unique identifier of the webhook to be edited"
          }
        },
        "required": [
          "webhookId"
        ]
      },
      "EditPublicWebhookBodyDto": {
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "format": "uri",
            "description": "URL of the webhook",
            "example": "https://example.com/webhook"
          },
          "method": {
            "type": "string",
            "description": "HTTP method used for the webhook",
            "enum": [
              "GET",
              "POST",
              "PUT",
              "DELETE",
              "PATCH",
              "HEAD"
            ],
            "example": "POST"
          },
          "headers": {
            "type": "object",
            "description": "Custom headers to be sent with the webhook",
            "additionalProperties": true,
            "example": {
              "Authorization": "Bearer token"
            }
          },
          "body": {
            "type": "object",
            "description": "Payload to be sent with the webhook",
            "additionalProperties": true
          },
          "query": {
            "type": "object",
            "description": "Query parameters to be included in the webhook URL",
            "additionalProperties": true
          },
          "bodyFormat": {
            "type": "string",
            "description": "Format of the body content",
            "enum": [
              "JSON",
              "FORM_DATA"
            ],
            "example": "JSON"
          },
          "authorization": {
            "type": "object",
            "description": "Authorization details for the webhook",
            "properties": {
              "type": {
                "type": "string",
                "description": "The type of authorization used for the webhook",
                "enum": [
                  "BASIC",
                  "BEARER"
                ],
                "example": "BEARER"
              },
              "payload": {
                "type": "string",
                "description": "The authorization payload, such as a token or credentials",
                "example": "some-secure-token"
              }
            },
            "required": [
              "type",
              "payload"
            ]
          },
          "webhookEvents": {
            "type": "array",
            "description": "Events that trigger the webhook",
            "items": {
              "type": "string",
              "enum": [
                "MESSAGE_RECEIVED",
                "MESSAGE_STATUS_UPDATE",
                "CHAT_ASSIGNED_TO_AGENT",
                "CHAT_UNASSIGNED",
                "UPDATE_CUSTOMER_CUSTOM_FIELD",
                "WIDGET_LEAD_RECEIVED",
                "VERIFIED_WIDGET_LEAD_RECEIVED",
                "NEW_LEAD",
                "RAW_CLOUD_API_WEBHOOK",
                "CLOSE_CONVERSATION",
                "TEMPLATE_UPDATE",
                "ADD_TAG",
                "REMOVE_TAG",
                "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                "CONVERSATION_OPENED",
                "CUSTOMER_BUSINESS_CHAT_OPEN"
              ]
            },
            "example": [
              "MESSAGE_RECEIVED",
              "CLOSE_CONVERSATION"
            ]
          },
          "retryOnTimeout": {
            "type": "boolean",
            "description": "Retry the webhook call on timeout"
          },
          "name": {
            "type": "string",
            "description": "Name of the webhook"
          },
          "wabaNumbers": {
            "type": "array",
            "description": "List of WABA numbers associated with the webhook",
            "items": {
              "type": "string",
              "example": "+919999999999",
              "minLength": 10,
              "maxLength": 15,
              "format": "phone"
            }
          }
        },
        "required": [
          "url",
          "method",
          "webhookEvents",
          "name",
          "wabaNumbers"
        ]
      },
      "PublicWebhook": {
        "type": "object",
        "properties": {
          "wabaNumber": {
            "type": "string",
            "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
            "example": "+919999999999"
          },
          "webhookEventType": {
            "type": "string",
            "description": "The type of event that triggers the webhook",
            "enum": [
              "MESSAGE_RECEIVED",
              "MESSAGE_STATUS_UPDATE",
              "CHAT_ASSIGNED_TO_AGENT",
              "CHAT_UNASSIGNED",
              "UPDATE_CUSTOMER_CUSTOM_FIELD",
              "WIDGET_LEAD_RECEIVED",
              "VERIFIED_WIDGET_LEAD_RECEIVED",
              "NEW_LEAD",
              "RAW_CLOUD_API_WEBHOOK",
              "CLOSE_CONVERSATION",
              "TEMPLATE_UPDATE",
              "ADD_TAG",
              "REMOVE_TAG",
              "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
              "CONVERSATION_OPENED",
              "CUSTOMER_BUSINESS_CHAT_OPEN"
            ],
            "example": "MESSAGE_RECEIVED"
          }
        },
        "required": [
          "wabaNumber",
          "webhookEventType"
        ]
      },
      "RegisterPublicWebhookResponseV2": {
        "type": "object",
        "properties": {
          "validWebhooks": {
            "type": "array",
            "description": "A list of valid webhooks",
            "items": {
              "type": "object",
              "properties": {
                "wabaNumber": {
                  "type": "string",
                  "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                  "example": "+919999999999"
                },
                "webhookEventType": {
                  "type": "string",
                  "description": "The type of event that triggers the webhook",
                  "enum": [
                    "MESSAGE_RECEIVED",
                    "MESSAGE_STATUS_UPDATE",
                    "CHAT_ASSIGNED_TO_AGENT",
                    "CHAT_UNASSIGNED",
                    "UPDATE_CUSTOMER_CUSTOM_FIELD",
                    "WIDGET_LEAD_RECEIVED",
                    "VERIFIED_WIDGET_LEAD_RECEIVED",
                    "NEW_LEAD",
                    "RAW_CLOUD_API_WEBHOOK",
                    "CLOSE_CONVERSATION",
                    "TEMPLATE_UPDATE",
                    "ADD_TAG",
                    "REMOVE_TAG",
                    "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                    "CONVERSATION_OPENED",
                    "CUSTOMER_BUSINESS_CHAT_OPEN"
                  ],
                  "example": "MESSAGE_RECEIVED"
                }
              },
              "required": [
                "wabaNumber",
                "webhookEventType"
              ]
            },
            "example": [
              {
                "wabaNumber": "+919999999999",
                "webhookEventType": "MESSAGE_RECEIVED"
              }
            ]
          },
          "invalidWebhooks": {
            "type": "array",
            "description": "A list of invalid webhooks",
            "items": {
              "type": "object",
              "properties": {
                "wabaNumber": {
                  "type": "string",
                  "description": "The WABA (WhatsApp Business Account) number associated with the webhook",
                  "example": "+919999999999"
                },
                "webhookEventType": {
                  "type": "string",
                  "description": "The type of event that triggers the webhook",
                  "enum": [
                    "MESSAGE_RECEIVED",
                    "MESSAGE_STATUS_UPDATE",
                    "CHAT_ASSIGNED_TO_AGENT",
                    "CHAT_UNASSIGNED",
                    "UPDATE_CUSTOMER_CUSTOM_FIELD",
                    "WIDGET_LEAD_RECEIVED",
                    "VERIFIED_WIDGET_LEAD_RECEIVED",
                    "NEW_LEAD",
                    "RAW_CLOUD_API_WEBHOOK",
                    "CLOSE_CONVERSATION",
                    "TEMPLATE_UPDATE",
                    "ADD_TAG",
                    "REMOVE_TAG",
                    "CALL_TO_WHATSAPP_MESSAGE_RECEIVED",
                    "CONVERSATION_OPENED",
                    "CUSTOMER_BUSINESS_CHAT_OPEN"
                  ],
                  "example": "MESSAGE_RECEIVED"
                }
              },
              "required": [
                "wabaNumber",
                "webhookEventType"
              ]
            },
            "example": [
              {
                "wabaNumber": "+918888888888",
                "webhookEventType": "INVALID_EVENT"
              }
            ]
          },
          "invalidWabaNumbers": {
            "type": "array",
            "description": "A list of invalid WABA numbers",
            "items": {
              "type": "string",
              "example": "+918888888880"
            }
          }
        },
        "required": [
          "validWebhooks",
          "invalidWebhooks",
          "invalidWabaNumbers"
        ]
      },
      "FetchWebhooksQueryResponseV2": {
        "type": "object",
        "properties": {
          "webhookId": {
            "type": "string",
            "description": "The unique identifier of the webhook",
            "example": "abc123"
          },
          "url": {
            "type": "string",
            "format": "uri",
            "description": "The URL of the webhook",
            "example": "https://example.com/webhook"
          },
          "eventTypes": {
            "type": "array",
            "description": "A list of event types that the webhook listens to",
            "items": {
              "type": "string",
              "example": "MESSAGE_RECEIVED"
            },
            "example": [
              "MESSAGE_RECEIVED",
              "MESSAGE_SENT"
            ]
          },
          "wabaNumbers": {
            "type": "array",
            "description": "A list of WABA Numbers associated with the webhook",
            "items": {
              "type": "string",
              "example": "+919999999999"
            },
            "example": [
              "+919999999999",
              "+918888888888"
            ]
          },
          "integrationCount": {
            "type": "integer",
            "description": "The count of integrations associated with the webhook",
            "example": 2
          },
          "createdBy": {
            "type": "string",
            "description": "The user who created the webhook",
            "example": "admin"
          },
          "name": {
            "type": "string",
            "description": "The name of the webhook",
            "example": "My Webhook"
          }
        },
        "required": [
          "webhookId",
          "url",
          "eventTypes",
          "wabaNumbers",
          "integrationCount",
          "createdBy",
          "name"
        ]
      },
      "FetchWebhooksResponseV2": {
        "type": "array",
        "items": {
          "type": "object",
          "properties": {
            "webhookId": {
              "type": "string",
              "description": "The unique identifier of the webhook",
              "example": "abc123"
            },
            "url": {
              "type": "string",
              "format": "uri",
              "description": "The URL of the webhook",
              "example": "https://example.com/webhook"
            },
            "eventTypes": {
              "type": "array",
              "description": "A list of event types that the webhook listens to",
              "items": {
                "type": "string",
                "example": "MESSAGE_RECEIVED"
              },
              "example": [
                "MESSAGE_RECEIVED",
                "MESSAGE_SENT"
              ]
            },
            "wabaNumbers": {
              "type": "array",
              "description": "A list of WABA Numbers associated with the webhook",
              "items": {
                "type": "string",
                "example": "+919999999999"
              },
              "example": [
                "+919999999999",
                "+918888888888"
              ]
            },
            "integrationCount": {
              "type": "integer",
              "description": "The count of integrations associated with the webhook",
              "example": 2
            },
            "createdBy": {
              "type": "string",
              "description": "The user who created the webhook",
              "example": "admin"
            },
            "name": {
              "type": "string",
              "description": "The name of the webhook",
              "example": "My Webhook"
            }
          },
          "required": [
            "webhookId",
            "url",
            "eventTypes",
            "wabaNumbers",
            "integrationCount",
            "createdBy",
            "name"
          ]
        },
        "description": "A list of webhooks response"
      },
      "AssignTeamMemberCustomerDto": {
        "type": "object",
        "properties": {
          "customerPhoneNumber": {
            "description": "Phone number of customer",
            "type": "string",
            "example": "917838849957",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "assignedUserPhoneNumber": {
            "description": "Phone number of user",
            "type": "string",
            "example": "917838849957",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          },
          "wabaNumber": {
            "type": "string",
            "description": "Integration Waba Number with country code",
            "example": "919876543210",
            "minLength": 7,
            "maxLength": 15,
            "format": "phone"
          }
        },
        "required": [
          "customerPhoneNumber",
          "assignedUserPhoneNumber",
          "wabaNumber"
        ]
      }
    }
  }
}